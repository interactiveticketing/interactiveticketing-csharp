/* 
 * Developer API
 *
 * Get your API Key from the [Dashboard](/dashboard/).<br/>Send all API requests with http header `X-API-Key: YOUR-API-KEY-HERE`.<br/>Base URL: `https://secure.interactiveticketing.com/developers/api/v4`<br/>Contact support@interactiveticketing.com for help.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using InteractiveTicketingSdk.Client;
using InteractiveTicketingSdk.Model;

namespace InteractiveTicketingSdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Query Abandoned Shopping Cart Data
        /// </summary>
        /// <remarks>
        /// Returns paginated list of cart data from the event. The &#x60;cartEmailId&#x60; is not unique across all events. Use &#x60;fromCartEmailId&#x60; parameter to loop through orders if you are pulling down all data.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="fromCartEmailId">Return entries with &#x60;cartEmailId&#x60; greater than &#x60;fromCartEmailId&#x60;. (optional)</param>
        /// <param name="email">Return entries with matching email address. (optional)</param>
        /// <param name="start">For pagination, return orders from &#x60;start&#x60; row index. (optional)</param>
        /// <param name="limit">For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)</param>
        /// <returns>PaginatedCartEmails</returns>
        PaginatedCartEmails EventsEventIdAbandonedShoppingCartsGet (int? eventId, int? fromCartEmailId = null, int? email = null, int? start = null, int? limit = null);

        /// <summary>
        /// Query Abandoned Shopping Cart Data
        /// </summary>
        /// <remarks>
        /// Returns paginated list of cart data from the event. The &#x60;cartEmailId&#x60; is not unique across all events. Use &#x60;fromCartEmailId&#x60; parameter to loop through orders if you are pulling down all data.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="fromCartEmailId">Return entries with &#x60;cartEmailId&#x60; greater than &#x60;fromCartEmailId&#x60;. (optional)</param>
        /// <param name="email">Return entries with matching email address. (optional)</param>
        /// <param name="start">For pagination, return orders from &#x60;start&#x60; row index. (optional)</param>
        /// <param name="limit">For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)</param>
        /// <returns>ApiResponse of PaginatedCartEmails</returns>
        ApiResponse<PaginatedCartEmails> EventsEventIdAbandonedShoppingCartsGetWithHttpInfo (int? eventId, int? fromCartEmailId = null, int? email = null, int? start = null, int? limit = null);
        /// <summary>
        /// Fetch Event by ID
        /// </summary>
        /// <remarks>
        /// Get single event with &#x60;eventId&#x60;.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <returns>ModelEvent</returns>
        ModelEvent EventsEventIdGet (long? eventId);

        /// <summary>
        /// Fetch Event by ID
        /// </summary>
        /// <remarks>
        /// Get single event with &#x60;eventId&#x60;.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <returns>ApiResponse of ModelEvent</returns>
        ApiResponse<ModelEvent> EventsEventIdGetWithHttpInfo (long? eventId);
        /// <summary>
        /// Fetch Order by Barcode
        /// </summary>
        /// <remarks>
        /// Get single order with &#x60;eventId&#x60; and &#x60;barcode&#x60;.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="barcode">Barcode from ticket of the order to return</param>
        /// <returns>Order</returns>
        Order EventsEventIdOrdersBarcodeBarcodeGet (long? eventId, string barcode);

        /// <summary>
        /// Fetch Order by Barcode
        /// </summary>
        /// <remarks>
        /// Get single order with &#x60;eventId&#x60; and &#x60;barcode&#x60;.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="barcode">Barcode from ticket of the order to return</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> EventsEventIdOrdersBarcodeBarcodeGetWithHttpInfo (long? eventId, string barcode);
        /// <summary>
        /// Query Orders
        /// </summary>
        /// <remarks>
        /// Returns paginated list of orders from the event. The &#x60;orderId&#x60; is not unique across all events. Use &#x60;fromOrderId&#x60; parameter to loop through orders if you are pulling down all data.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="fromOrderId">Return orders with &#x60;orderId&#x60; greater than &#x60;fromOrderId&#x60;. (optional)</param>
        /// <param name="start">For pagination, return orders from &#x60;start&#x60; row index. (optional)</param>
        /// <param name="limit">For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)</param>
        /// <param name="testMode">Query test orders only. (optional)</param>
        /// <param name="orderType">To query only &#x60;web&#x60;, &#x60;pos&#x60;, or &#x60;kiosk&#x60; orders. (optional)</param>
        /// <returns>PaginatedOrders</returns>
        PaginatedOrders EventsEventIdOrdersGet (int? eventId, int? fromOrderId = null, int? start = null, int? limit = null, bool? testMode = null, string orderType = null);

        /// <summary>
        /// Query Orders
        /// </summary>
        /// <remarks>
        /// Returns paginated list of orders from the event. The &#x60;orderId&#x60; is not unique across all events. Use &#x60;fromOrderId&#x60; parameter to loop through orders if you are pulling down all data.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="fromOrderId">Return orders with &#x60;orderId&#x60; greater than &#x60;fromOrderId&#x60;. (optional)</param>
        /// <param name="start">For pagination, return orders from &#x60;start&#x60; row index. (optional)</param>
        /// <param name="limit">For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)</param>
        /// <param name="testMode">Query test orders only. (optional)</param>
        /// <param name="orderType">To query only &#x60;web&#x60;, &#x60;pos&#x60;, or &#x60;kiosk&#x60; orders. (optional)</param>
        /// <returns>ApiResponse of PaginatedOrders</returns>
        ApiResponse<PaginatedOrders> EventsEventIdOrdersGetWithHttpInfo (int? eventId, int? fromOrderId = null, int? start = null, int? limit = null, bool? testMode = null, string orderType = null);
        /// <summary>
        /// Fetch Order by ID
        /// </summary>
        /// <remarks>
        /// Get single order with &#x60;eventId&#x60; and &#x60;orderId&#x60;.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="orderId">ID of order to return</param>
        /// <returns>Order</returns>
        Order EventsEventIdOrdersOrderIdGet (long? eventId, long? orderId);

        /// <summary>
        /// Fetch Order by ID
        /// </summary>
        /// <remarks>
        /// Get single order with &#x60;eventId&#x60; and &#x60;orderId&#x60;.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="orderId">ID of order to return</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> EventsEventIdOrdersOrderIdGetWithHttpInfo (long? eventId, long? orderId);
        /// <summary>
        /// List All Events
        /// </summary>
        /// <remarks>
        /// Get list of all your events with their &#x60;eventId&#x60;.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ModelEvent&gt;</returns>
        List<ModelEvent> EventsGet ();

        /// <summary>
        /// List All Events
        /// </summary>
        /// <remarks>
        /// Get list of all your events with their &#x60;eventId&#x60;.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ModelEvent&gt;</returns>
        ApiResponse<List<ModelEvent>> EventsGetWithHttpInfo ();
        /// <summary>
        /// Scan Ticket
        /// </summary>
        /// <remarks>
        /// Scan a ticket or third party barcode.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of user object</param>
        /// <returns>ScanResponse</returns>
        ScanResponse ScanPost (ScanRequest body);

        /// <summary>
        /// Scan Ticket
        /// </summary>
        /// <remarks>
        /// Scan a ticket or third party barcode.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of user object</param>
        /// <returns>ApiResponse of ScanResponse</returns>
        ApiResponse<ScanResponse> ScanPostWithHttpInfo (ScanRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Query Abandoned Shopping Cart Data
        /// </summary>
        /// <remarks>
        /// Returns paginated list of cart data from the event. The &#x60;cartEmailId&#x60; is not unique across all events. Use &#x60;fromCartEmailId&#x60; parameter to loop through orders if you are pulling down all data.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="fromCartEmailId">Return entries with &#x60;cartEmailId&#x60; greater than &#x60;fromCartEmailId&#x60;. (optional)</param>
        /// <param name="email">Return entries with matching email address. (optional)</param>
        /// <param name="start">For pagination, return orders from &#x60;start&#x60; row index. (optional)</param>
        /// <param name="limit">For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)</param>
        /// <returns>Task of PaginatedCartEmails</returns>
        System.Threading.Tasks.Task<PaginatedCartEmails> EventsEventIdAbandonedShoppingCartsGetAsync (int? eventId, int? fromCartEmailId = null, int? email = null, int? start = null, int? limit = null);

        /// <summary>
        /// Query Abandoned Shopping Cart Data
        /// </summary>
        /// <remarks>
        /// Returns paginated list of cart data from the event. The &#x60;cartEmailId&#x60; is not unique across all events. Use &#x60;fromCartEmailId&#x60; parameter to loop through orders if you are pulling down all data.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="fromCartEmailId">Return entries with &#x60;cartEmailId&#x60; greater than &#x60;fromCartEmailId&#x60;. (optional)</param>
        /// <param name="email">Return entries with matching email address. (optional)</param>
        /// <param name="start">For pagination, return orders from &#x60;start&#x60; row index. (optional)</param>
        /// <param name="limit">For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)</param>
        /// <returns>Task of ApiResponse (PaginatedCartEmails)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedCartEmails>> EventsEventIdAbandonedShoppingCartsGetAsyncWithHttpInfo (int? eventId, int? fromCartEmailId = null, int? email = null, int? start = null, int? limit = null);
        /// <summary>
        /// Fetch Event by ID
        /// </summary>
        /// <remarks>
        /// Get single event with &#x60;eventId&#x60;.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <returns>Task of ModelEvent</returns>
        System.Threading.Tasks.Task<ModelEvent> EventsEventIdGetAsync (long? eventId);

        /// <summary>
        /// Fetch Event by ID
        /// </summary>
        /// <remarks>
        /// Get single event with &#x60;eventId&#x60;.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <returns>Task of ApiResponse (ModelEvent)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelEvent>> EventsEventIdGetAsyncWithHttpInfo (long? eventId);
        /// <summary>
        /// Fetch Order by Barcode
        /// </summary>
        /// <remarks>
        /// Get single order with &#x60;eventId&#x60; and &#x60;barcode&#x60;.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="barcode">Barcode from ticket of the order to return</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> EventsEventIdOrdersBarcodeBarcodeGetAsync (long? eventId, string barcode);

        /// <summary>
        /// Fetch Order by Barcode
        /// </summary>
        /// <remarks>
        /// Get single order with &#x60;eventId&#x60; and &#x60;barcode&#x60;.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="barcode">Barcode from ticket of the order to return</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> EventsEventIdOrdersBarcodeBarcodeGetAsyncWithHttpInfo (long? eventId, string barcode);
        /// <summary>
        /// Query Orders
        /// </summary>
        /// <remarks>
        /// Returns paginated list of orders from the event. The &#x60;orderId&#x60; is not unique across all events. Use &#x60;fromOrderId&#x60; parameter to loop through orders if you are pulling down all data.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="fromOrderId">Return orders with &#x60;orderId&#x60; greater than &#x60;fromOrderId&#x60;. (optional)</param>
        /// <param name="start">For pagination, return orders from &#x60;start&#x60; row index. (optional)</param>
        /// <param name="limit">For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)</param>
        /// <param name="testMode">Query test orders only. (optional)</param>
        /// <param name="orderType">To query only &#x60;web&#x60;, &#x60;pos&#x60;, or &#x60;kiosk&#x60; orders. (optional)</param>
        /// <returns>Task of PaginatedOrders</returns>
        System.Threading.Tasks.Task<PaginatedOrders> EventsEventIdOrdersGetAsync (int? eventId, int? fromOrderId = null, int? start = null, int? limit = null, bool? testMode = null, string orderType = null);

        /// <summary>
        /// Query Orders
        /// </summary>
        /// <remarks>
        /// Returns paginated list of orders from the event. The &#x60;orderId&#x60; is not unique across all events. Use &#x60;fromOrderId&#x60; parameter to loop through orders if you are pulling down all data.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="fromOrderId">Return orders with &#x60;orderId&#x60; greater than &#x60;fromOrderId&#x60;. (optional)</param>
        /// <param name="start">For pagination, return orders from &#x60;start&#x60; row index. (optional)</param>
        /// <param name="limit">For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)</param>
        /// <param name="testMode">Query test orders only. (optional)</param>
        /// <param name="orderType">To query only &#x60;web&#x60;, &#x60;pos&#x60;, or &#x60;kiosk&#x60; orders. (optional)</param>
        /// <returns>Task of ApiResponse (PaginatedOrders)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedOrders>> EventsEventIdOrdersGetAsyncWithHttpInfo (int? eventId, int? fromOrderId = null, int? start = null, int? limit = null, bool? testMode = null, string orderType = null);
        /// <summary>
        /// Fetch Order by ID
        /// </summary>
        /// <remarks>
        /// Get single order with &#x60;eventId&#x60; and &#x60;orderId&#x60;.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="orderId">ID of order to return</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> EventsEventIdOrdersOrderIdGetAsync (long? eventId, long? orderId);

        /// <summary>
        /// Fetch Order by ID
        /// </summary>
        /// <remarks>
        /// Get single order with &#x60;eventId&#x60; and &#x60;orderId&#x60;.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="orderId">ID of order to return</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> EventsEventIdOrdersOrderIdGetAsyncWithHttpInfo (long? eventId, long? orderId);
        /// <summary>
        /// List All Events
        /// </summary>
        /// <remarks>
        /// Get list of all your events with their &#x60;eventId&#x60;.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ModelEvent&gt;</returns>
        System.Threading.Tasks.Task<List<ModelEvent>> EventsGetAsync ();

        /// <summary>
        /// List All Events
        /// </summary>
        /// <remarks>
        /// Get list of all your events with their &#x60;eventId&#x60;.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ModelEvent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelEvent>>> EventsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Scan Ticket
        /// </summary>
        /// <remarks>
        /// Scan a ticket or third party barcode.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of user object</param>
        /// <returns>Task of ScanResponse</returns>
        System.Threading.Tasks.Task<ScanResponse> ScanPostAsync (ScanRequest body);

        /// <summary>
        /// Scan Ticket
        /// </summary>
        /// <remarks>
        /// Scan a ticket or third party barcode.
        /// </remarks>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of user object</param>
        /// <returns>Task of ApiResponse (ScanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScanResponse>> ScanPostAsyncWithHttpInfo (ScanRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private InteractiveTicketingSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new InteractiveTicketingSdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = InteractiveTicketingSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = InteractiveTicketingSdk.Client.Configuration.Default;

            ExceptionFactory = InteractiveTicketingSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(InteractiveTicketingSdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = InteractiveTicketingSdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = InteractiveTicketingSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public InteractiveTicketingSdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public InteractiveTicketingSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Query Abandoned Shopping Cart Data Returns paginated list of cart data from the event. The &#x60;cartEmailId&#x60; is not unique across all events. Use &#x60;fromCartEmailId&#x60; parameter to loop through orders if you are pulling down all data.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="fromCartEmailId">Return entries with &#x60;cartEmailId&#x60; greater than &#x60;fromCartEmailId&#x60;. (optional)</param>
        /// <param name="email">Return entries with matching email address. (optional)</param>
        /// <param name="start">For pagination, return orders from &#x60;start&#x60; row index. (optional)</param>
        /// <param name="limit">For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)</param>
        /// <returns>PaginatedCartEmails</returns>
        public PaginatedCartEmails EventsEventIdAbandonedShoppingCartsGet (int? eventId, int? fromCartEmailId = null, int? email = null, int? start = null, int? limit = null)
        {
             ApiResponse<PaginatedCartEmails> localVarResponse = EventsEventIdAbandonedShoppingCartsGetWithHttpInfo(eventId, fromCartEmailId, email, start, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query Abandoned Shopping Cart Data Returns paginated list of cart data from the event. The &#x60;cartEmailId&#x60; is not unique across all events. Use &#x60;fromCartEmailId&#x60; parameter to loop through orders if you are pulling down all data.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="fromCartEmailId">Return entries with &#x60;cartEmailId&#x60; greater than &#x60;fromCartEmailId&#x60;. (optional)</param>
        /// <param name="email">Return entries with matching email address. (optional)</param>
        /// <param name="start">For pagination, return orders from &#x60;start&#x60; row index. (optional)</param>
        /// <param name="limit">For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)</param>
        /// <returns>ApiResponse of PaginatedCartEmails</returns>
        public ApiResponse< PaginatedCartEmails > EventsEventIdAbandonedShoppingCartsGetWithHttpInfo (int? eventId, int? fromCartEmailId = null, int? email = null, int? start = null, int? limit = null)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling DefaultApi->EventsEventIdAbandonedShoppingCartsGet");

            var localVarPath = "./events/{eventId}/abandonedShoppingCarts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (fromCartEmailId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromCartEmailId", fromCartEmailId)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsEventIdAbandonedShoppingCartsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedCartEmails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PaginatedCartEmails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedCartEmails)));
        }

        /// <summary>
        /// Query Abandoned Shopping Cart Data Returns paginated list of cart data from the event. The &#x60;cartEmailId&#x60; is not unique across all events. Use &#x60;fromCartEmailId&#x60; parameter to loop through orders if you are pulling down all data.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="fromCartEmailId">Return entries with &#x60;cartEmailId&#x60; greater than &#x60;fromCartEmailId&#x60;. (optional)</param>
        /// <param name="email">Return entries with matching email address. (optional)</param>
        /// <param name="start">For pagination, return orders from &#x60;start&#x60; row index. (optional)</param>
        /// <param name="limit">For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)</param>
        /// <returns>Task of PaginatedCartEmails</returns>
        public async System.Threading.Tasks.Task<PaginatedCartEmails> EventsEventIdAbandonedShoppingCartsGetAsync (int? eventId, int? fromCartEmailId = null, int? email = null, int? start = null, int? limit = null)
        {
             ApiResponse<PaginatedCartEmails> localVarResponse = await EventsEventIdAbandonedShoppingCartsGetAsyncWithHttpInfo(eventId, fromCartEmailId, email, start, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query Abandoned Shopping Cart Data Returns paginated list of cart data from the event. The &#x60;cartEmailId&#x60; is not unique across all events. Use &#x60;fromCartEmailId&#x60; parameter to loop through orders if you are pulling down all data.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="fromCartEmailId">Return entries with &#x60;cartEmailId&#x60; greater than &#x60;fromCartEmailId&#x60;. (optional)</param>
        /// <param name="email">Return entries with matching email address. (optional)</param>
        /// <param name="start">For pagination, return orders from &#x60;start&#x60; row index. (optional)</param>
        /// <param name="limit">For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)</param>
        /// <returns>Task of ApiResponse (PaginatedCartEmails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaginatedCartEmails>> EventsEventIdAbandonedShoppingCartsGetAsyncWithHttpInfo (int? eventId, int? fromCartEmailId = null, int? email = null, int? start = null, int? limit = null)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling DefaultApi->EventsEventIdAbandonedShoppingCartsGet");

            var localVarPath = "./events/{eventId}/abandonedShoppingCarts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (fromCartEmailId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromCartEmailId", fromCartEmailId)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsEventIdAbandonedShoppingCartsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedCartEmails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PaginatedCartEmails) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedCartEmails)));
        }

        /// <summary>
        /// Fetch Event by ID Get single event with &#x60;eventId&#x60;.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <returns>ModelEvent</returns>
        public ModelEvent EventsEventIdGet (long? eventId)
        {
             ApiResponse<ModelEvent> localVarResponse = EventsEventIdGetWithHttpInfo(eventId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch Event by ID Get single event with &#x60;eventId&#x60;.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <returns>ApiResponse of ModelEvent</returns>
        public ApiResponse< ModelEvent > EventsEventIdGetWithHttpInfo (long? eventId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling DefaultApi->EventsEventIdGet");

            var localVarPath = "./events/{eventId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsEventIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelEvent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ModelEvent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelEvent)));
        }

        /// <summary>
        /// Fetch Event by ID Get single event with &#x60;eventId&#x60;.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <returns>Task of ModelEvent</returns>
        public async System.Threading.Tasks.Task<ModelEvent> EventsEventIdGetAsync (long? eventId)
        {
             ApiResponse<ModelEvent> localVarResponse = await EventsEventIdGetAsyncWithHttpInfo(eventId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch Event by ID Get single event with &#x60;eventId&#x60;.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <returns>Task of ApiResponse (ModelEvent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelEvent>> EventsEventIdGetAsyncWithHttpInfo (long? eventId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling DefaultApi->EventsEventIdGet");

            var localVarPath = "./events/{eventId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsEventIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelEvent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ModelEvent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelEvent)));
        }

        /// <summary>
        /// Fetch Order by Barcode Get single order with &#x60;eventId&#x60; and &#x60;barcode&#x60;.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="barcode">Barcode from ticket of the order to return</param>
        /// <returns>Order</returns>
        public Order EventsEventIdOrdersBarcodeBarcodeGet (long? eventId, string barcode)
        {
             ApiResponse<Order> localVarResponse = EventsEventIdOrdersBarcodeBarcodeGetWithHttpInfo(eventId, barcode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch Order by Barcode Get single order with &#x60;eventId&#x60; and &#x60;barcode&#x60;.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="barcode">Barcode from ticket of the order to return</param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse< Order > EventsEventIdOrdersBarcodeBarcodeGetWithHttpInfo (long? eventId, string barcode)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling DefaultApi->EventsEventIdOrdersBarcodeBarcodeGet");
            // verify the required parameter 'barcode' is set
            if (barcode == null)
                throw new ApiException(400, "Missing required parameter 'barcode' when calling DefaultApi->EventsEventIdOrdersBarcodeBarcodeGet");

            var localVarPath = "./events/{eventId}/orders/barcode/{barcode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (barcode != null) localVarPathParams.Add("barcode", this.Configuration.ApiClient.ParameterToString(barcode)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsEventIdOrdersBarcodeBarcodeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        /// Fetch Order by Barcode Get single order with &#x60;eventId&#x60; and &#x60;barcode&#x60;.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="barcode">Barcode from ticket of the order to return</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> EventsEventIdOrdersBarcodeBarcodeGetAsync (long? eventId, string barcode)
        {
             ApiResponse<Order> localVarResponse = await EventsEventIdOrdersBarcodeBarcodeGetAsyncWithHttpInfo(eventId, barcode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch Order by Barcode Get single order with &#x60;eventId&#x60; and &#x60;barcode&#x60;.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="barcode">Barcode from ticket of the order to return</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Order>> EventsEventIdOrdersBarcodeBarcodeGetAsyncWithHttpInfo (long? eventId, string barcode)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling DefaultApi->EventsEventIdOrdersBarcodeBarcodeGet");
            // verify the required parameter 'barcode' is set
            if (barcode == null)
                throw new ApiException(400, "Missing required parameter 'barcode' when calling DefaultApi->EventsEventIdOrdersBarcodeBarcodeGet");

            var localVarPath = "./events/{eventId}/orders/barcode/{barcode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (barcode != null) localVarPathParams.Add("barcode", this.Configuration.ApiClient.ParameterToString(barcode)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsEventIdOrdersBarcodeBarcodeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        /// Query Orders Returns paginated list of orders from the event. The &#x60;orderId&#x60; is not unique across all events. Use &#x60;fromOrderId&#x60; parameter to loop through orders if you are pulling down all data.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="fromOrderId">Return orders with &#x60;orderId&#x60; greater than &#x60;fromOrderId&#x60;. (optional)</param>
        /// <param name="start">For pagination, return orders from &#x60;start&#x60; row index. (optional)</param>
        /// <param name="limit">For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)</param>
        /// <param name="testMode">Query test orders only. (optional)</param>
        /// <param name="orderType">To query only &#x60;web&#x60;, &#x60;pos&#x60;, or &#x60;kiosk&#x60; orders. (optional)</param>
        /// <returns>PaginatedOrders</returns>
        public PaginatedOrders EventsEventIdOrdersGet (int? eventId, int? fromOrderId = null, int? start = null, int? limit = null, bool? testMode = null, string orderType = null)
        {
             ApiResponse<PaginatedOrders> localVarResponse = EventsEventIdOrdersGetWithHttpInfo(eventId, fromOrderId, start, limit, testMode, orderType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query Orders Returns paginated list of orders from the event. The &#x60;orderId&#x60; is not unique across all events. Use &#x60;fromOrderId&#x60; parameter to loop through orders if you are pulling down all data.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="fromOrderId">Return orders with &#x60;orderId&#x60; greater than &#x60;fromOrderId&#x60;. (optional)</param>
        /// <param name="start">For pagination, return orders from &#x60;start&#x60; row index. (optional)</param>
        /// <param name="limit">For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)</param>
        /// <param name="testMode">Query test orders only. (optional)</param>
        /// <param name="orderType">To query only &#x60;web&#x60;, &#x60;pos&#x60;, or &#x60;kiosk&#x60; orders. (optional)</param>
        /// <returns>ApiResponse of PaginatedOrders</returns>
        public ApiResponse< PaginatedOrders > EventsEventIdOrdersGetWithHttpInfo (int? eventId, int? fromOrderId = null, int? start = null, int? limit = null, bool? testMode = null, string orderType = null)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling DefaultApi->EventsEventIdOrdersGet");

            var localVarPath = "./events/{eventId}/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (fromOrderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromOrderId", fromOrderId)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (testMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "testMode", testMode)); // query parameter
            if (orderType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderType", orderType)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsEventIdOrdersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedOrders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PaginatedOrders) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedOrders)));
        }

        /// <summary>
        /// Query Orders Returns paginated list of orders from the event. The &#x60;orderId&#x60; is not unique across all events. Use &#x60;fromOrderId&#x60; parameter to loop through orders if you are pulling down all data.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="fromOrderId">Return orders with &#x60;orderId&#x60; greater than &#x60;fromOrderId&#x60;. (optional)</param>
        /// <param name="start">For pagination, return orders from &#x60;start&#x60; row index. (optional)</param>
        /// <param name="limit">For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)</param>
        /// <param name="testMode">Query test orders only. (optional)</param>
        /// <param name="orderType">To query only &#x60;web&#x60;, &#x60;pos&#x60;, or &#x60;kiosk&#x60; orders. (optional)</param>
        /// <returns>Task of PaginatedOrders</returns>
        public async System.Threading.Tasks.Task<PaginatedOrders> EventsEventIdOrdersGetAsync (int? eventId, int? fromOrderId = null, int? start = null, int? limit = null, bool? testMode = null, string orderType = null)
        {
             ApiResponse<PaginatedOrders> localVarResponse = await EventsEventIdOrdersGetAsyncWithHttpInfo(eventId, fromOrderId, start, limit, testMode, orderType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query Orders Returns paginated list of orders from the event. The &#x60;orderId&#x60; is not unique across all events. Use &#x60;fromOrderId&#x60; parameter to loop through orders if you are pulling down all data.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="fromOrderId">Return orders with &#x60;orderId&#x60; greater than &#x60;fromOrderId&#x60;. (optional)</param>
        /// <param name="start">For pagination, return orders from &#x60;start&#x60; row index. (optional)</param>
        /// <param name="limit">For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)</param>
        /// <param name="testMode">Query test orders only. (optional)</param>
        /// <param name="orderType">To query only &#x60;web&#x60;, &#x60;pos&#x60;, or &#x60;kiosk&#x60; orders. (optional)</param>
        /// <returns>Task of ApiResponse (PaginatedOrders)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaginatedOrders>> EventsEventIdOrdersGetAsyncWithHttpInfo (int? eventId, int? fromOrderId = null, int? start = null, int? limit = null, bool? testMode = null, string orderType = null)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling DefaultApi->EventsEventIdOrdersGet");

            var localVarPath = "./events/{eventId}/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (fromOrderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromOrderId", fromOrderId)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (testMode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "testMode", testMode)); // query parameter
            if (orderType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderType", orderType)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsEventIdOrdersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaginatedOrders>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PaginatedOrders) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaginatedOrders)));
        }

        /// <summary>
        /// Fetch Order by ID Get single order with &#x60;eventId&#x60; and &#x60;orderId&#x60;.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="orderId">ID of order to return</param>
        /// <returns>Order</returns>
        public Order EventsEventIdOrdersOrderIdGet (long? eventId, long? orderId)
        {
             ApiResponse<Order> localVarResponse = EventsEventIdOrdersOrderIdGetWithHttpInfo(eventId, orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch Order by ID Get single order with &#x60;eventId&#x60; and &#x60;orderId&#x60;.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="orderId">ID of order to return</param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse< Order > EventsEventIdOrdersOrderIdGetWithHttpInfo (long? eventId, long? orderId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling DefaultApi->EventsEventIdOrdersOrderIdGet");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling DefaultApi->EventsEventIdOrdersOrderIdGet");

            var localVarPath = "./events/{eventId}/orders/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsEventIdOrdersOrderIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        /// Fetch Order by ID Get single order with &#x60;eventId&#x60; and &#x60;orderId&#x60;.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="orderId">ID of order to return</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> EventsEventIdOrdersOrderIdGetAsync (long? eventId, long? orderId)
        {
             ApiResponse<Order> localVarResponse = await EventsEventIdOrdersOrderIdGetAsyncWithHttpInfo(eventId, orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch Order by ID Get single order with &#x60;eventId&#x60; and &#x60;orderId&#x60;.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event to return</param>
        /// <param name="orderId">ID of order to return</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Order>> EventsEventIdOrdersOrderIdGetAsyncWithHttpInfo (long? eventId, long? orderId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling DefaultApi->EventsEventIdOrdersOrderIdGet");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling DefaultApi->EventsEventIdOrdersOrderIdGet");

            var localVarPath = "./events/{eventId}/orders/{orderId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter
            if (orderId != null) localVarPathParams.Add("orderId", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsEventIdOrdersOrderIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        /// List All Events Get list of all your events with their &#x60;eventId&#x60;.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ModelEvent&gt;</returns>
        public List<ModelEvent> EventsGet ()
        {
             ApiResponse<List<ModelEvent>> localVarResponse = EventsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List All Events Get list of all your events with their &#x60;eventId&#x60;.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ModelEvent&gt;</returns>
        public ApiResponse< List<ModelEvent> > EventsGetWithHttpInfo ()
        {

            var localVarPath = "./events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelEvent>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<ModelEvent>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelEvent>)));
        }

        /// <summary>
        /// List All Events Get list of all your events with their &#x60;eventId&#x60;.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ModelEvent&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelEvent>> EventsGetAsync ()
        {
             ApiResponse<List<ModelEvent>> localVarResponse = await EventsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List All Events Get list of all your events with their &#x60;eventId&#x60;.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ModelEvent&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelEvent>>> EventsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "./events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EventsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelEvent>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (List<ModelEvent>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelEvent>)));
        }

        /// <summary>
        /// Scan Ticket Scan a ticket or third party barcode.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of user object</param>
        /// <returns>ScanResponse</returns>
        public ScanResponse ScanPost (ScanRequest body)
        {
             ApiResponse<ScanResponse> localVarResponse = ScanPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Scan Ticket Scan a ticket or third party barcode.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of user object</param>
        /// <returns>ApiResponse of ScanResponse</returns>
        public ApiResponse< ScanResponse > ScanPostWithHttpInfo (ScanRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ScanPost");

            var localVarPath = "./scan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScanPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ScanResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScanResponse)));
        }

        /// <summary>
        /// Scan Ticket Scan a ticket or third party barcode.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of user object</param>
        /// <returns>Task of ScanResponse</returns>
        public async System.Threading.Tasks.Task<ScanResponse> ScanPostAsync (ScanRequest body)
        {
             ApiResponse<ScanResponse> localVarResponse = await ScanPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Scan Ticket Scan a ticket or third party barcode.
        /// </summary>
        /// <exception cref="InteractiveTicketingSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of user object</param>
        /// <returns>Task of ApiResponse (ScanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScanResponse>> ScanPostAsyncWithHttpInfo (ScanRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ScanPost");

            var localVarPath = "./scan";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScanPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScanResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ScanResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScanResponse)));
        }

    }
}
