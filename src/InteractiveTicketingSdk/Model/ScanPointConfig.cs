/* 
 * Developer API
 *
 * Get your API Key from the [Dashboard](/dashboard/).<br/>Send all API requests with http header `X-API-Key: YOUR-API-KEY-HERE`.<br/>Base URL: `https://secure.interactiveticketing.com/developers/api/v2`<br/>Contact support@interactiveticketing.com for help.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = InteractiveTicketingSdk.Client.SwaggerDateConverter;

namespace InteractiveTicketingSdk.Model
{
    /// <summary>
    /// ScanPointConfig
    /// </summary>
    [DataContract]
        public partial class ScanPointConfig :  IEquatable<ScanPointConfig>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScanPointConfig" /> class.
        /// </summary>
        /// <param name="scanPointConfigId">The Scan Point Config ID.</param>
        /// <param name="name">The Scan Point Config name.</param>
        /// <param name="summary">The Scan Point Config resrictions described.</param>
        public ScanPointConfig(int? scanPointConfigId = default(int?), string name = default(string), List<string> summary = default(List<string>))
        {
            this.ScanPointConfigId = scanPointConfigId;
            this.Name = name;
            this.Summary = summary;
        }
        
        /// <summary>
        /// The Scan Point Config ID
        /// </summary>
        /// <value>The Scan Point Config ID</value>
        [DataMember(Name="scanPointConfigId", EmitDefaultValue=false)]
        public int? ScanPointConfigId { get; set; }

        /// <summary>
        /// The Scan Point Config name
        /// </summary>
        /// <value>The Scan Point Config name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The Scan Point Config resrictions described
        /// </summary>
        /// <value>The Scan Point Config resrictions described</value>
        [DataMember(Name="_summary", EmitDefaultValue=false)]
        public List<string> Summary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScanPointConfig {\n");
            sb.Append("  ScanPointConfigId: ").Append(ScanPointConfigId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScanPointConfig);
        }

        /// <summary>
        /// Returns true if ScanPointConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of ScanPointConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScanPointConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScanPointConfigId == input.ScanPointConfigId ||
                    (this.ScanPointConfigId != null &&
                    this.ScanPointConfigId.Equals(input.ScanPointConfigId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Summary == input.Summary ||
                    this.Summary != null &&
                    input.Summary != null &&
                    this.Summary.SequenceEqual(input.Summary)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScanPointConfigId != null)
                    hashCode = hashCode * 59 + this.ScanPointConfigId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Summary != null)
                    hashCode = hashCode * 59 + this.Summary.GetHashCode();
                return hashCode;
            }
        }
    }
}
