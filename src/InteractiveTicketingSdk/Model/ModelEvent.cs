/* 
 * Developer API
 *
 * Get your API Key from the [Dashboard](/dashboard/).<br/>Send all API requests with http header `X-API-Key: YOUR-API-KEY-HERE`.<br/>Base URL: `https://secure.interactiveticketing.com/developers/api/v4`<br/>Contact support@interactiveticketing.com for help.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = InteractiveTicketingSdk.Client.SwaggerDateConverter;

namespace InteractiveTicketingSdk.Model
{
    /// <summary>
    /// ModelEvent
    /// </summary>
    [DataContract]
        public partial class ModelEvent :  IEquatable<ModelEvent>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelEvent" /> class.
        /// </summary>
        /// <param name="eventId">The event ID.</param>
        /// <param name="name">The event name.</param>
        /// <param name="status">live | offline | completed.</param>
        /// <param name="_client">_client.</param>
        /// <param name="scanPoints">Array of ScanPoint.</param>
        public ModelEvent(int? eventId = default(int?), string name = default(string), string status = default(string), ModelClient _client = default(ModelClient), List<ScanPoint> scanPoints = default(List<ScanPoint>))
        {
            this.EventId = eventId;
            this.Name = name;
            this.Status = status;
            this._Client = _client;
            this.ScanPoints = scanPoints;
        }
        
        /// <summary>
        /// The event ID
        /// </summary>
        /// <value>The event ID</value>
        [DataMember(Name="eventId", EmitDefaultValue=false)]
        public int? EventId { get; set; }

        /// <summary>
        /// The event name
        /// </summary>
        /// <value>The event name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// live | offline | completed
        /// </summary>
        /// <value>live | offline | completed</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets _Client
        /// </summary>
        [DataMember(Name="_client", EmitDefaultValue=false)]
        public ModelClient _Client { get; set; }

        /// <summary>
        /// Array of ScanPoint
        /// </summary>
        /// <value>Array of ScanPoint</value>
        [DataMember(Name="_scanPoints", EmitDefaultValue=false)]
        public List<ScanPoint> ScanPoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelEvent {\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  _Client: ").Append(_Client).Append("\n");
            sb.Append("  ScanPoints: ").Append(ScanPoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelEvent);
        }

        /// <summary>
        /// Returns true if ModelEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EventId == input.EventId ||
                    (this.EventId != null &&
                    this.EventId.Equals(input.EventId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this._Client == input._Client ||
                    (this._Client != null &&
                    this._Client.Equals(input._Client))
                ) && 
                (
                    this.ScanPoints == input.ScanPoints ||
                    this.ScanPoints != null &&
                    input.ScanPoints != null &&
                    this.ScanPoints.SequenceEqual(input.ScanPoints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventId != null)
                    hashCode = hashCode * 59 + this.EventId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this._Client != null)
                    hashCode = hashCode * 59 + this._Client.GetHashCode();
                if (this.ScanPoints != null)
                    hashCode = hashCode * 59 + this.ScanPoints.GetHashCode();
                return hashCode;
            }
        }
    }
}
