/* 
 * Developer API
 *
 * Get your API Key from the [Dashboard](/dashboard/).<br/>Send all API requests with http header `X-API-Key: YOUR-API-KEY-HERE`.<br/>Base URL: `https://secure.interactiveticketing.com/developers/api/v4`<br/>Contact support@interactiveticketing.com for help.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = InteractiveTicketingSdk.Client.SwaggerDateConverter;

namespace InteractiveTicketingSdk.Model
{
    /// <summary>
    /// Transaction
    /// </summary>
    [DataContract]
        public partial class Transaction :  IEquatable<Transaction>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Transaction" /> class.
        /// </summary>
        /// <param name="transactionId">The transaction ID.</param>
        /// <param name="dateTime">The transaction time iso-8601.</param>
        /// <param name="isRefund">The transaction is a refund.</param>
        /// <param name="amount">The transaction amount.</param>
        /// <param name="type">credit | cash | other | triPos.</param>
        /// <param name="cardTransactionId">The payment gateway transaction identifier.</param>
        /// <param name="cardType">The payment credit card type code.</param>
        /// <param name="cardLastFour">The payment credit card last four digits.</param>
        /// <param name="cardName">The payment credit card customer name on card.</param>
        /// <param name="referenceTransactionId">Applicable to refund transaction, reference to the original &#x60;cardTransactionId&#x60;.</param>
        /// <param name="billStreet">Billing street address.</param>
        /// <param name="billCity">Billing city.</param>
        /// <param name="billStateProvince">Billing state or province.</param>
        /// <param name="billPostalCode">Billing post code / zip.</param>
        /// <param name="billCountry">Billing country.</param>
        /// <param name="refundReason">Applicable to refund transactions.</param>
        public Transaction(int? transactionId = default(int?), string dateTime = default(string), bool? isRefund = default(bool?), string amount = default(string), string type = default(string), string cardTransactionId = default(string), string cardType = default(string), string cardLastFour = default(string), string cardName = default(string), string referenceTransactionId = default(string), string billStreet = default(string), string billCity = default(string), string billStateProvince = default(string), string billPostalCode = default(string), string billCountry = default(string), string refundReason = default(string))
        {
            this.TransactionId = transactionId;
            this.DateTime = dateTime;
            this.IsRefund = isRefund;
            this.Amount = amount;
            this.Type = type;
            this.CardTransactionId = cardTransactionId;
            this.CardType = cardType;
            this.CardLastFour = cardLastFour;
            this.CardName = cardName;
            this.ReferenceTransactionId = referenceTransactionId;
            this.BillStreet = billStreet;
            this.BillCity = billCity;
            this.BillStateProvince = billStateProvince;
            this.BillPostalCode = billPostalCode;
            this.BillCountry = billCountry;
            this.RefundReason = refundReason;
        }
        
        /// <summary>
        /// The transaction ID
        /// </summary>
        /// <value>The transaction ID</value>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public int? TransactionId { get; set; }

        /// <summary>
        /// The transaction time iso-8601
        /// </summary>
        /// <value>The transaction time iso-8601</value>
        [DataMember(Name="dateTime", EmitDefaultValue=false)]
        public string DateTime { get; set; }

        /// <summary>
        /// The transaction is a refund
        /// </summary>
        /// <value>The transaction is a refund</value>
        [DataMember(Name="isRefund", EmitDefaultValue=false)]
        public bool? IsRefund { get; set; }

        /// <summary>
        /// The transaction amount
        /// </summary>
        /// <value>The transaction amount</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// credit | cash | other | triPos
        /// </summary>
        /// <value>credit | cash | other | triPos</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The payment gateway transaction identifier
        /// </summary>
        /// <value>The payment gateway transaction identifier</value>
        [DataMember(Name="cardTransactionId", EmitDefaultValue=false)]
        public string CardTransactionId { get; set; }

        /// <summary>
        /// The payment credit card type code
        /// </summary>
        /// <value>The payment credit card type code</value>
        [DataMember(Name="cardType", EmitDefaultValue=false)]
        public string CardType { get; set; }

        /// <summary>
        /// The payment credit card last four digits
        /// </summary>
        /// <value>The payment credit card last four digits</value>
        [DataMember(Name="cardLastFour", EmitDefaultValue=false)]
        public string CardLastFour { get; set; }

        /// <summary>
        /// The payment credit card customer name on card
        /// </summary>
        /// <value>The payment credit card customer name on card</value>
        [DataMember(Name="cardName", EmitDefaultValue=false)]
        public string CardName { get; set; }

        /// <summary>
        /// Applicable to refund transaction, reference to the original &#x60;cardTransactionId&#x60;
        /// </summary>
        /// <value>Applicable to refund transaction, reference to the original &#x60;cardTransactionId&#x60;</value>
        [DataMember(Name="referenceTransactionId", EmitDefaultValue=false)]
        public string ReferenceTransactionId { get; set; }

        /// <summary>
        /// Billing street address
        /// </summary>
        /// <value>Billing street address</value>
        [DataMember(Name="billStreet", EmitDefaultValue=false)]
        public string BillStreet { get; set; }

        /// <summary>
        /// Billing city
        /// </summary>
        /// <value>Billing city</value>
        [DataMember(Name="billCity", EmitDefaultValue=false)]
        public string BillCity { get; set; }

        /// <summary>
        /// Billing state or province
        /// </summary>
        /// <value>Billing state or province</value>
        [DataMember(Name="billStateProvince", EmitDefaultValue=false)]
        public string BillStateProvince { get; set; }

        /// <summary>
        /// Billing post code / zip
        /// </summary>
        /// <value>Billing post code / zip</value>
        [DataMember(Name="billPostalCode", EmitDefaultValue=false)]
        public string BillPostalCode { get; set; }

        /// <summary>
        /// Billing country
        /// </summary>
        /// <value>Billing country</value>
        [DataMember(Name="billCountry", EmitDefaultValue=false)]
        public string BillCountry { get; set; }

        /// <summary>
        /// Applicable to refund transactions
        /// </summary>
        /// <value>Applicable to refund transactions</value>
        [DataMember(Name="refundReason", EmitDefaultValue=false)]
        public string RefundReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transaction {\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  IsRefund: ").Append(IsRefund).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CardTransactionId: ").Append(CardTransactionId).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("  CardLastFour: ").Append(CardLastFour).Append("\n");
            sb.Append("  CardName: ").Append(CardName).Append("\n");
            sb.Append("  ReferenceTransactionId: ").Append(ReferenceTransactionId).Append("\n");
            sb.Append("  BillStreet: ").Append(BillStreet).Append("\n");
            sb.Append("  BillCity: ").Append(BillCity).Append("\n");
            sb.Append("  BillStateProvince: ").Append(BillStateProvince).Append("\n");
            sb.Append("  BillPostalCode: ").Append(BillPostalCode).Append("\n");
            sb.Append("  BillCountry: ").Append(BillCountry).Append("\n");
            sb.Append("  RefundReason: ").Append(RefundReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Transaction);
        }

        /// <summary>
        /// Returns true if Transaction instances are equal
        /// </summary>
        /// <param name="input">Instance of Transaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                ) && 
                (
                    this.IsRefund == input.IsRefund ||
                    (this.IsRefund != null &&
                    this.IsRefund.Equals(input.IsRefund))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CardTransactionId == input.CardTransactionId ||
                    (this.CardTransactionId != null &&
                    this.CardTransactionId.Equals(input.CardTransactionId))
                ) && 
                (
                    this.CardType == input.CardType ||
                    (this.CardType != null &&
                    this.CardType.Equals(input.CardType))
                ) && 
                (
                    this.CardLastFour == input.CardLastFour ||
                    (this.CardLastFour != null &&
                    this.CardLastFour.Equals(input.CardLastFour))
                ) && 
                (
                    this.CardName == input.CardName ||
                    (this.CardName != null &&
                    this.CardName.Equals(input.CardName))
                ) && 
                (
                    this.ReferenceTransactionId == input.ReferenceTransactionId ||
                    (this.ReferenceTransactionId != null &&
                    this.ReferenceTransactionId.Equals(input.ReferenceTransactionId))
                ) && 
                (
                    this.BillStreet == input.BillStreet ||
                    (this.BillStreet != null &&
                    this.BillStreet.Equals(input.BillStreet))
                ) && 
                (
                    this.BillCity == input.BillCity ||
                    (this.BillCity != null &&
                    this.BillCity.Equals(input.BillCity))
                ) && 
                (
                    this.BillStateProvince == input.BillStateProvince ||
                    (this.BillStateProvince != null &&
                    this.BillStateProvince.Equals(input.BillStateProvince))
                ) && 
                (
                    this.BillPostalCode == input.BillPostalCode ||
                    (this.BillPostalCode != null &&
                    this.BillPostalCode.Equals(input.BillPostalCode))
                ) && 
                (
                    this.BillCountry == input.BillCountry ||
                    (this.BillCountry != null &&
                    this.BillCountry.Equals(input.BillCountry))
                ) && 
                (
                    this.RefundReason == input.RefundReason ||
                    (this.RefundReason != null &&
                    this.RefundReason.Equals(input.RefundReason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                if (this.DateTime != null)
                    hashCode = hashCode * 59 + this.DateTime.GetHashCode();
                if (this.IsRefund != null)
                    hashCode = hashCode * 59 + this.IsRefund.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.CardTransactionId != null)
                    hashCode = hashCode * 59 + this.CardTransactionId.GetHashCode();
                if (this.CardType != null)
                    hashCode = hashCode * 59 + this.CardType.GetHashCode();
                if (this.CardLastFour != null)
                    hashCode = hashCode * 59 + this.CardLastFour.GetHashCode();
                if (this.CardName != null)
                    hashCode = hashCode * 59 + this.CardName.GetHashCode();
                if (this.ReferenceTransactionId != null)
                    hashCode = hashCode * 59 + this.ReferenceTransactionId.GetHashCode();
                if (this.BillStreet != null)
                    hashCode = hashCode * 59 + this.BillStreet.GetHashCode();
                if (this.BillCity != null)
                    hashCode = hashCode * 59 + this.BillCity.GetHashCode();
                if (this.BillStateProvince != null)
                    hashCode = hashCode * 59 + this.BillStateProvince.GetHashCode();
                if (this.BillPostalCode != null)
                    hashCode = hashCode * 59 + this.BillPostalCode.GetHashCode();
                if (this.BillCountry != null)
                    hashCode = hashCode * 59 + this.BillCountry.GetHashCode();
                if (this.RefundReason != null)
                    hashCode = hashCode * 59 + this.RefundReason.GetHashCode();
                return hashCode;
            }
        }
    }
}
