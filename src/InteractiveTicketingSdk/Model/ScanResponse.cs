/* 
 * Developer API
 *
 * Get your API Key from the [Dashboard](/dashboard/).<br/>Send all API requests with http header `X-API-Key: YOUR-API-KEY-HERE`.<br/>Base URL: `https://secure.interactiveticketing.com/developers/api/v4`<br/>Contact support@interactiveticketing.com for help.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = InteractiveTicketingSdk.Client.SwaggerDateConverter;

namespace InteractiveTicketingSdk.Model
{
    /// <summary>
    /// ScanResponse
    /// </summary>
    [DataContract]
        public partial class ScanResponse :  IEquatable<ScanResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScanResponse" /> class.
        /// </summary>
        /// <param name="valid">True indicates scan passed validation.</param>
        /// <param name="code">Returns code string.</param>
        /// <param name="message">Returns message.</param>
        /// <param name="details">Returns details.</param>
        /// <param name="scanTime">Returns current time used for the scan.</param>
        /// <param name="method">single, mobile, or passbook based on suffix on barcodes.</param>
        /// <param name="barcode">The barcode for the scan.</param>
        /// <param name="scanPointId">The scanPointId for the scan.</param>
        /// <param name="testMode">True if test mode is used.</param>
        /// <param name="_event">_event.</param>
        /// <param name="ticket">ticket.</param>
        /// <param name="offlineTicket">offlineTicket.</param>
        /// <param name="thirdPartyTicket">thirdPartyTicket.</param>
        public ScanResponse(bool? valid = default(bool?), string code = default(string), string message = default(string), string details = default(string), string scanTime = default(string), string method = default(string), string barcode = default(string), string scanPointId = default(string), bool? testMode = default(bool?), ModelEvent _event = default(ModelEvent), Ticket ticket = default(Ticket), OfflineTicket offlineTicket = default(OfflineTicket), ThirdPartyTicket thirdPartyTicket = default(ThirdPartyTicket))
        {
            this.Valid = valid;
            this.Code = code;
            this.Message = message;
            this.Details = details;
            this.ScanTime = scanTime;
            this.Method = method;
            this.Barcode = barcode;
            this.ScanPointId = scanPointId;
            this.TestMode = testMode;
            this._Event = _event;
            this.Ticket = ticket;
            this.OfflineTicket = offlineTicket;
            this.ThirdPartyTicket = thirdPartyTicket;
        }
        
        /// <summary>
        /// True indicates scan passed validation
        /// </summary>
        /// <value>True indicates scan passed validation</value>
        [DataMember(Name="valid", EmitDefaultValue=false)]
        public bool? Valid { get; set; }

        /// <summary>
        /// Returns code string
        /// </summary>
        /// <value>Returns code string</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Returns message
        /// </summary>
        /// <value>Returns message</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns details
        /// </summary>
        /// <value>Returns details</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public string Details { get; set; }

        /// <summary>
        /// Returns current time used for the scan
        /// </summary>
        /// <value>Returns current time used for the scan</value>
        [DataMember(Name="scanTime", EmitDefaultValue=false)]
        public string ScanTime { get; set; }

        /// <summary>
        /// single, mobile, or passbook based on suffix on barcodes
        /// </summary>
        /// <value>single, mobile, or passbook based on suffix on barcodes</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public string Method { get; set; }

        /// <summary>
        /// The barcode for the scan
        /// </summary>
        /// <value>The barcode for the scan</value>
        [DataMember(Name="barcode", EmitDefaultValue=false)]
        public string Barcode { get; set; }

        /// <summary>
        /// The scanPointId for the scan
        /// </summary>
        /// <value>The scanPointId for the scan</value>
        [DataMember(Name="scanPointId", EmitDefaultValue=false)]
        public string ScanPointId { get; set; }

        /// <summary>
        /// True if test mode is used
        /// </summary>
        /// <value>True if test mode is used</value>
        [DataMember(Name="testMode", EmitDefaultValue=false)]
        public bool? TestMode { get; set; }

        /// <summary>
        /// Gets or Sets _Event
        /// </summary>
        [DataMember(Name="event", EmitDefaultValue=false)]
        public ModelEvent _Event { get; set; }

        /// <summary>
        /// Gets or Sets Ticket
        /// </summary>
        [DataMember(Name="ticket", EmitDefaultValue=false)]
        public Ticket Ticket { get; set; }

        /// <summary>
        /// Gets or Sets OfflineTicket
        /// </summary>
        [DataMember(Name="offlineTicket", EmitDefaultValue=false)]
        public OfflineTicket OfflineTicket { get; set; }

        /// <summary>
        /// Gets or Sets ThirdPartyTicket
        /// </summary>
        [DataMember(Name="thirdPartyTicket", EmitDefaultValue=false)]
        public ThirdPartyTicket ThirdPartyTicket { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScanResponse {\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  ScanTime: ").Append(ScanTime).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  ScanPointId: ").Append(ScanPointId).Append("\n");
            sb.Append("  TestMode: ").Append(TestMode).Append("\n");
            sb.Append("  _Event: ").Append(_Event).Append("\n");
            sb.Append("  Ticket: ").Append(Ticket).Append("\n");
            sb.Append("  OfflineTicket: ").Append(OfflineTicket).Append("\n");
            sb.Append("  ThirdPartyTicket: ").Append(ThirdPartyTicket).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScanResponse);
        }

        /// <summary>
        /// Returns true if ScanResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ScanResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScanResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Valid == input.Valid ||
                    (this.Valid != null &&
                    this.Valid.Equals(input.Valid))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.ScanTime == input.ScanTime ||
                    (this.ScanTime != null &&
                    this.ScanTime.Equals(input.ScanTime))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.Barcode == input.Barcode ||
                    (this.Barcode != null &&
                    this.Barcode.Equals(input.Barcode))
                ) && 
                (
                    this.ScanPointId == input.ScanPointId ||
                    (this.ScanPointId != null &&
                    this.ScanPointId.Equals(input.ScanPointId))
                ) && 
                (
                    this.TestMode == input.TestMode ||
                    (this.TestMode != null &&
                    this.TestMode.Equals(input.TestMode))
                ) && 
                (
                    this._Event == input._Event ||
                    (this._Event != null &&
                    this._Event.Equals(input._Event))
                ) && 
                (
                    this.Ticket == input.Ticket ||
                    (this.Ticket != null &&
                    this.Ticket.Equals(input.Ticket))
                ) && 
                (
                    this.OfflineTicket == input.OfflineTicket ||
                    (this.OfflineTicket != null &&
                    this.OfflineTicket.Equals(input.OfflineTicket))
                ) && 
                (
                    this.ThirdPartyTicket == input.ThirdPartyTicket ||
                    (this.ThirdPartyTicket != null &&
                    this.ThirdPartyTicket.Equals(input.ThirdPartyTicket))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Valid != null)
                    hashCode = hashCode * 59 + this.Valid.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.ScanTime != null)
                    hashCode = hashCode * 59 + this.ScanTime.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.Barcode != null)
                    hashCode = hashCode * 59 + this.Barcode.GetHashCode();
                if (this.ScanPointId != null)
                    hashCode = hashCode * 59 + this.ScanPointId.GetHashCode();
                if (this.TestMode != null)
                    hashCode = hashCode * 59 + this.TestMode.GetHashCode();
                if (this._Event != null)
                    hashCode = hashCode * 59 + this._Event.GetHashCode();
                if (this.Ticket != null)
                    hashCode = hashCode * 59 + this.Ticket.GetHashCode();
                if (this.OfflineTicket != null)
                    hashCode = hashCode * 59 + this.OfflineTicket.GetHashCode();
                if (this.ThirdPartyTicket != null)
                    hashCode = hashCode * 59 + this.ThirdPartyTicket.GetHashCode();
                return hashCode;
            }
        }
    }
}
