/* 
 * Developer API
 *
 * Get your API Key from the [Dashboard](/dashboard/).<br/>Send all API requests with http header `X-API-Key: YOUR-API-KEY-HERE`.<br/>Base URL: `https://secure.interactiveticketing.com/developers/api/v4`<br/>Contact support@interactiveticketing.com for help.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = InteractiveTicketingSdk.Client.SwaggerDateConverter;

namespace InteractiveTicketingSdk.Model
{
    /// <summary>
    /// Device
    /// </summary>
    [DataContract]
        public partial class Device :  IEquatable<Device>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Device" /> class.
        /// </summary>
        /// <param name="deviceId">The scanning device ID.</param>
        /// <param name="lastConnectTime">The device last sync time iso-8601.</param>
        /// <param name="ip">The device last IP address.</param>
        /// <param name="app">The device app type.</param>
        /// <param name="appVersion">The device app version.</param>
        /// <param name="displayName">The device label.</param>
        /// <param name="os">The device OS.</param>
        public Device(int? deviceId = default(int?), string lastConnectTime = default(string), string ip = default(string), string app = default(string), string appVersion = default(string), string displayName = default(string), string os = default(string))
        {
            this.DeviceId = deviceId;
            this.LastConnectTime = lastConnectTime;
            this.Ip = ip;
            this.App = app;
            this.AppVersion = appVersion;
            this.DisplayName = displayName;
            this.Os = os;
        }
        
        /// <summary>
        /// The scanning device ID
        /// </summary>
        /// <value>The scanning device ID</value>
        [DataMember(Name="deviceId", EmitDefaultValue=false)]
        public int? DeviceId { get; set; }

        /// <summary>
        /// The device last sync time iso-8601
        /// </summary>
        /// <value>The device last sync time iso-8601</value>
        [DataMember(Name="lastConnectTime", EmitDefaultValue=false)]
        public string LastConnectTime { get; set; }

        /// <summary>
        /// The device last IP address
        /// </summary>
        /// <value>The device last IP address</value>
        [DataMember(Name="ip", EmitDefaultValue=false)]
        public string Ip { get; set; }

        /// <summary>
        /// The device app type
        /// </summary>
        /// <value>The device app type</value>
        [DataMember(Name="app", EmitDefaultValue=false)]
        public string App { get; set; }

        /// <summary>
        /// The device app version
        /// </summary>
        /// <value>The device app version</value>
        [DataMember(Name="appVersion", EmitDefaultValue=false)]
        public string AppVersion { get; set; }

        /// <summary>
        /// The device label
        /// </summary>
        /// <value>The device label</value>
        [DataMember(Name="_displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The device OS
        /// </summary>
        /// <value>The device OS</value>
        [DataMember(Name="_os", EmitDefaultValue=false)]
        public string Os { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Device {\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  LastConnectTime: ").Append(LastConnectTime).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  App: ").Append(App).Append("\n");
            sb.Append("  AppVersion: ").Append(AppVersion).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Os: ").Append(Os).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Device);
        }

        /// <summary>
        /// Returns true if Device instances are equal
        /// </summary>
        /// <param name="input">Instance of Device to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Device input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.LastConnectTime == input.LastConnectTime ||
                    (this.LastConnectTime != null &&
                    this.LastConnectTime.Equals(input.LastConnectTime))
                ) && 
                (
                    this.Ip == input.Ip ||
                    (this.Ip != null &&
                    this.Ip.Equals(input.Ip))
                ) && 
                (
                    this.App == input.App ||
                    (this.App != null &&
                    this.App.Equals(input.App))
                ) && 
                (
                    this.AppVersion == input.AppVersion ||
                    (this.AppVersion != null &&
                    this.AppVersion.Equals(input.AppVersion))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Os == input.Os ||
                    (this.Os != null &&
                    this.Os.Equals(input.Os))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeviceId != null)
                    hashCode = hashCode * 59 + this.DeviceId.GetHashCode();
                if (this.LastConnectTime != null)
                    hashCode = hashCode * 59 + this.LastConnectTime.GetHashCode();
                if (this.Ip != null)
                    hashCode = hashCode * 59 + this.Ip.GetHashCode();
                if (this.App != null)
                    hashCode = hashCode * 59 + this.App.GetHashCode();
                if (this.AppVersion != null)
                    hashCode = hashCode * 59 + this.AppVersion.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Os != null)
                    hashCode = hashCode * 59 + this.Os.GetHashCode();
                return hashCode;
            }
        }
    }
}
