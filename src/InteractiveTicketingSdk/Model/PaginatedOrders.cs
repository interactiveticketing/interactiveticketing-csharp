/* 
 * Developer API
 *
 * Get your API Key from the [Dashboard](/dashboard/).<br/>Send all API requests with http header `X-API-Key: YOUR-API-KEY-HERE`.<br/>Base URL: `https://secure.interactiveticketing.com/developers/api/v1`<br/>Contact support@interactiveticketing.com for help.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = InteractiveTicketingSdk.Client.SwaggerDateConverter;

namespace InteractiveTicketingSdk.Model
{
    /// <summary>
    /// PaginatedOrders
    /// </summary>
    [DataContract]
        public partial class PaginatedOrders :  IEquatable<PaginatedOrders>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaginatedOrders" /> class.
        /// </summary>
        /// <param name="">Page of orders.</param>
        /// <param name="">The start index position in query results page.</param>
        /// <param name="">The number of items per page.</param>
        /// <param name="">The maximum number of items per page supported by the endpoint.</param>
        /// <param name="">The number of items on current page.</param>
        /// <param name="">The total number of items on all pages.</param>
        public PaginatedOrders(List<Order>  = default(List<Order>), int?  = default(int?), int?  = default(int?), int?  = default(int?), int?  = default(int?), int?  = default(int?))
        {
            this.Results = ;
            this.Start = ;
            this.Limit = ;
            this.LimitMax = ;
            this.Length = ;
            this.Total = ;
        }
        
        /// <summary>
        /// Page of orders
        /// </summary>
        /// <value>Page of orders</value>
        [DataMember(Name="results", EmitDefaultValue=false)]
        public List<Order> Results { get; set; }

        /// <summary>
        /// The start index position in query results page
        /// </summary>
        /// <value>The start index position in query results page</value>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public int? Start { get; set; }

        /// <summary>
        /// The number of items per page
        /// </summary>
        /// <value>The number of items per page</value>
        [DataMember(Name="limit", EmitDefaultValue=false)]
        public int? Limit { get; set; }

        /// <summary>
        /// The maximum number of items per page supported by the endpoint
        /// </summary>
        /// <value>The maximum number of items per page supported by the endpoint</value>
        [DataMember(Name="limitMax", EmitDefaultValue=false)]
        public int? LimitMax { get; set; }

        /// <summary>
        /// The number of items on current page
        /// </summary>
        /// <value>The number of items on current page</value>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public int? Length { get; set; }

        /// <summary>
        /// The total number of items on all pages
        /// </summary>
        /// <value>The total number of items on all pages</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public int? Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaginatedOrders {\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  LimitMax: ").Append(LimitMax).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaginatedOrders);
        }

        /// <summary>
        /// Returns true if PaginatedOrders instances are equal
        /// </summary>
        /// <param name="input">Instance of PaginatedOrders to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaginatedOrders input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.Limit == input.Limit ||
                    (this.Limit != null &&
                    this.Limit.Equals(input.Limit))
                ) && 
                (
                    this.LimitMax == input.LimitMax ||
                    (this.LimitMax != null &&
                    this.LimitMax.Equals(input.LimitMax))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Results != null)
                    hashCode = hashCode * 59 + this.Results.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.Limit != null)
                    hashCode = hashCode * 59 + this.Limit.GetHashCode();
                if (this.LimitMax != null)
                    hashCode = hashCode * 59 + this.LimitMax.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                return hashCode;
            }
        }
    }
}
