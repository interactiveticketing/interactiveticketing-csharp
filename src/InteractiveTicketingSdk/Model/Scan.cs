/* 
 * Developer API
 *
 * Get your API Key from the [Dashboard](/dashboard/).<br/>Send all API requests with http header `X-API-Key: YOUR-API-KEY-HERE`.<br/>Base URL: `https://secure.interactiveticketing.com/developers/api/v1`<br/>Contact support@interactiveticketing.com for help.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = InteractiveTicketingSdk.Client.SwaggerDateConverter;

namespace InteractiveTicketingSdk.Model
{
    /// <summary>
    /// Scan
    /// </summary>
    [DataContract]
        public partial class Scan :  IEquatable<Scan>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Scan" /> class.
        /// </summary>
        /// <param name="">The scan ID.</param>
        /// <param name="">The scan time iso-8601.</param>
        /// <param name="">Gate name identifier string.</param>
        /// <param name="">The scan device sync time with server iso-8601.</param>
        /// <param name="">Ticket format scanned: &#x60;single&#x60; | &#x60;mobile&#x60; | &#x60;passbook&#x60;.</param>
        /// <param name="">.</param>
        /// <param name="">.</param>
        public Scan(int?  = default(int?), string  = default(string), string  = default(string), string  = default(string), string  = default(string), ScanPoint  = default(ScanPoint), Device  = default(Device))
        {
            this.ScanId = ;
            this.Time = ;
            this.Gate = ;
            this.UploadTime = ;
            this.Method = ;
            this.ScanPoint = ;
            this.Device = ;
        }
        
        /// <summary>
        /// The scan ID
        /// </summary>
        /// <value>The scan ID</value>
        [DataMember(Name="scanId", EmitDefaultValue=false)]
        public int? ScanId { get; set; }

        /// <summary>
        /// The scan time iso-8601
        /// </summary>
        /// <value>The scan time iso-8601</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public string Time { get; set; }

        /// <summary>
        /// Gate name identifier string
        /// </summary>
        /// <value>Gate name identifier string</value>
        [DataMember(Name="gate", EmitDefaultValue=false)]
        public string Gate { get; set; }

        /// <summary>
        /// The scan device sync time with server iso-8601
        /// </summary>
        /// <value>The scan device sync time with server iso-8601</value>
        [DataMember(Name="uploadTime", EmitDefaultValue=false)]
        public string UploadTime { get; set; }

        /// <summary>
        /// Ticket format scanned: &#x60;single&#x60; | &#x60;mobile&#x60; | &#x60;passbook&#x60;
        /// </summary>
        /// <value>Ticket format scanned: &#x60;single&#x60; | &#x60;mobile&#x60; | &#x60;passbook&#x60;</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public string Method { get; set; }

        /// <summary>
        /// Gets or Sets ScanPoint
        /// </summary>
        [DataMember(Name="_scanPoint", EmitDefaultValue=false)]
        public ScanPoint ScanPoint { get; set; }

        /// <summary>
        /// Gets or Sets Device
        /// </summary>
        [DataMember(Name="_device", EmitDefaultValue=false)]
        public Device Device { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Scan {\n");
            sb.Append("  ScanId: ").Append(ScanId).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Gate: ").Append(Gate).Append("\n");
            sb.Append("  UploadTime: ").Append(UploadTime).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  ScanPoint: ").Append(ScanPoint).Append("\n");
            sb.Append("  Device: ").Append(Device).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Scan);
        }

        /// <summary>
        /// Returns true if Scan instances are equal
        /// </summary>
        /// <param name="input">Instance of Scan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Scan input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScanId == input.ScanId ||
                    (this.ScanId != null &&
                    this.ScanId.Equals(input.ScanId))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.Gate == input.Gate ||
                    (this.Gate != null &&
                    this.Gate.Equals(input.Gate))
                ) && 
                (
                    this.UploadTime == input.UploadTime ||
                    (this.UploadTime != null &&
                    this.UploadTime.Equals(input.UploadTime))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.ScanPoint == input.ScanPoint ||
                    (this.ScanPoint != null &&
                    this.ScanPoint.Equals(input.ScanPoint))
                ) && 
                (
                    this.Device == input.Device ||
                    (this.Device != null &&
                    this.Device.Equals(input.Device))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScanId != null)
                    hashCode = hashCode * 59 + this.ScanId.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.Gate != null)
                    hashCode = hashCode * 59 + this.Gate.GetHashCode();
                if (this.UploadTime != null)
                    hashCode = hashCode * 59 + this.UploadTime.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.ScanPoint != null)
                    hashCode = hashCode * 59 + this.ScanPoint.GetHashCode();
                if (this.Device != null)
                    hashCode = hashCode * 59 + this.Device.GetHashCode();
                return hashCode;
            }
        }
    }
}
