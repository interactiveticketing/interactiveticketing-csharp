/* 
 * Developer API
 *
 * Get your API Key from the [Dashboard](/dashboard/).<br/>Send all API requests with http header `X-API-Key: YOUR-API-KEY-HERE`.<br/>Base URL: `https://secure.interactiveticketing.com/developers/api/v1`<br/>Contact support@interactiveticketing.com for help.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = InteractiveTicketingSdk.Client.SwaggerDateConverter;

namespace InteractiveTicketingSdk.Model
{
    /// <summary>
    /// Ticket
    /// </summary>
    [DataContract]
        public partial class Ticket :  IEquatable<Ticket>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ticket" /> class.
        /// </summary>
        /// <param name="">The ticket ID.</param>
        /// <param name="">The ticket barcode.</param>
        /// <param name="">Canceled / Voided ticket.</param>
        /// <param name="">Name of ticket.</param>
        /// <param name="">Details about the ticket.</param>
        /// <param name="">Purchase price for the ticket.</param>
        /// <param name="">Applicable to timed ticketing.</param>
        /// <param name="">Applicable to timed ticketing.</param>
        /// <param name="">Applicable to timed ticketing.</param>
        /// <param name="">Customer name printed on ticket.</param>
        /// <param name="">Applicable to reserved seating.</param>
        /// <param name="">Applicable to reserved seating.</param>
        /// <param name="">Applicable to reserved seating.</param>
        /// <param name="">Applicable to reserved seating.</param>
        /// <param name="">Applicable to reserved seating.</param>
        /// <param name="">Applicable to reserved seating.</param>
        /// <param name="">Applicable to reserved seating.</param>
        /// <param name="">Applicable to reserved seating.</param>
        /// <param name="">Applicable to reserved seating.</param>
        /// <param name="">Applicable to reserved seating.</param>
        /// <param name="">Indicates tickets that should not be printed.</param>
        /// <param name="">Indicates tickets that should not be barcoded.</param>
        /// <param name="">Discounts applied to the ticket.</param>
        /// <param name="">Oranization charged service fee.</param>
        /// <param name="">Oranization chaarged tax.</param>
        /// <param name="">Alloted refund back to ticket (for reports).</param>
        /// <param name="">Applicable to promo code discounts.</param>
        /// <param name="">Applicable to promo code discounts.</param>
        /// <param name="">Applicable to promo code discounts.</param>
        /// <param name="">Array of ticket scan activity.</param>
        /// <param name="">.</param>
        public Ticket(int?  = default(int?), string  = default(string), bool?  = default(bool?), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string), bool?  = default(bool?), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string), int?  = default(int?), string  = default(string), string  = default(string), bool?  = default(bool?), bool?  = default(bool?), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string), List<Scan>  = default(List<Scan>), ScanPointConfig  = default(ScanPointConfig))
        {
            this.TicketId = ;
            this.Barcode = ;
            this.Canceled = ;
            this.Name = ;
            this.Details = ;
            this.Price = ;
            this.SlotDate = ;
            this.SlotTime = ;
            this.SlotAllDay = ;
            this.NameOnTicket = ;
            this.SeatEventTitle = ;
            this.SeatVenueTitle = ;
            this.SeatSection = ;
            this.SeatCustom1 = ;
            this.SeatCustom2 = ;
            this.SeatRow = ;
            this.SeatRowLabel = ;
            this.SeatNumber = ;
            this.SeatNumberLabel = ;
            this.SeatText = ;
            this.NoPrint = ;
            this.NoBarcode = ;
            this.Discount = ;
            this.Fee = ;
            this.Tax = ;
            this.Refund = ;
            this.PromoCode = ;
            this.PromoName = ;
            this.PromoDescription = ;
            this.Scans = ;
            this.ScanPointConfig = ;
        }
        
        /// <summary>
        /// The ticket ID
        /// </summary>
        /// <value>The ticket ID</value>
        [DataMember(Name="ticketId", EmitDefaultValue=false)]
        public int? TicketId { get; set; }

        /// <summary>
        /// The ticket barcode
        /// </summary>
        /// <value>The ticket barcode</value>
        [DataMember(Name="barcode", EmitDefaultValue=false)]
        public string Barcode { get; set; }

        /// <summary>
        /// Canceled / Voided ticket
        /// </summary>
        /// <value>Canceled / Voided ticket</value>
        [DataMember(Name="canceled", EmitDefaultValue=false)]
        public bool? Canceled { get; set; }

        /// <summary>
        /// Name of ticket
        /// </summary>
        /// <value>Name of ticket</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Details about the ticket
        /// </summary>
        /// <value>Details about the ticket</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public string Details { get; set; }

        /// <summary>
        /// Purchase price for the ticket
        /// </summary>
        /// <value>Purchase price for the ticket</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public string Price { get; set; }

        /// <summary>
        /// Applicable to timed ticketing
        /// </summary>
        /// <value>Applicable to timed ticketing</value>
        [DataMember(Name="slotDate", EmitDefaultValue=false)]
        public string SlotDate { get; set; }

        /// <summary>
        /// Applicable to timed ticketing
        /// </summary>
        /// <value>Applicable to timed ticketing</value>
        [DataMember(Name="slotTime", EmitDefaultValue=false)]
        public string SlotTime { get; set; }

        /// <summary>
        /// Applicable to timed ticketing
        /// </summary>
        /// <value>Applicable to timed ticketing</value>
        [DataMember(Name="slotAllDay", EmitDefaultValue=false)]
        public bool? SlotAllDay { get; set; }

        /// <summary>
        /// Customer name printed on ticket
        /// </summary>
        /// <value>Customer name printed on ticket</value>
        [DataMember(Name="nameOnTicket", EmitDefaultValue=false)]
        public string NameOnTicket { get; set; }

        /// <summary>
        /// Applicable to reserved seating
        /// </summary>
        /// <value>Applicable to reserved seating</value>
        [DataMember(Name="seatEventTitle", EmitDefaultValue=false)]
        public string SeatEventTitle { get; set; }

        /// <summary>
        /// Applicable to reserved seating
        /// </summary>
        /// <value>Applicable to reserved seating</value>
        [DataMember(Name="seatVenueTitle", EmitDefaultValue=false)]
        public string SeatVenueTitle { get; set; }

        /// <summary>
        /// Applicable to reserved seating
        /// </summary>
        /// <value>Applicable to reserved seating</value>
        [DataMember(Name="seatSection", EmitDefaultValue=false)]
        public string SeatSection { get; set; }

        /// <summary>
        /// Applicable to reserved seating
        /// </summary>
        /// <value>Applicable to reserved seating</value>
        [DataMember(Name="seatCustom1", EmitDefaultValue=false)]
        public string SeatCustom1 { get; set; }

        /// <summary>
        /// Applicable to reserved seating
        /// </summary>
        /// <value>Applicable to reserved seating</value>
        [DataMember(Name="seatCustom2", EmitDefaultValue=false)]
        public string SeatCustom2 { get; set; }

        /// <summary>
        /// Applicable to reserved seating
        /// </summary>
        /// <value>Applicable to reserved seating</value>
        [DataMember(Name="seatRow", EmitDefaultValue=false)]
        public string SeatRow { get; set; }

        /// <summary>
        /// Applicable to reserved seating
        /// </summary>
        /// <value>Applicable to reserved seating</value>
        [DataMember(Name="seatRowLabel", EmitDefaultValue=false)]
        public string SeatRowLabel { get; set; }

        /// <summary>
        /// Applicable to reserved seating
        /// </summary>
        /// <value>Applicable to reserved seating</value>
        [DataMember(Name="seatNumber", EmitDefaultValue=false)]
        public int? SeatNumber { get; set; }

        /// <summary>
        /// Applicable to reserved seating
        /// </summary>
        /// <value>Applicable to reserved seating</value>
        [DataMember(Name="seatNumberLabel", EmitDefaultValue=false)]
        public string SeatNumberLabel { get; set; }

        /// <summary>
        /// Applicable to reserved seating
        /// </summary>
        /// <value>Applicable to reserved seating</value>
        [DataMember(Name="seatText", EmitDefaultValue=false)]
        public string SeatText { get; set; }

        /// <summary>
        /// Indicates tickets that should not be printed
        /// </summary>
        /// <value>Indicates tickets that should not be printed</value>
        [DataMember(Name="noPrint", EmitDefaultValue=false)]
        public bool? NoPrint { get; set; }

        /// <summary>
        /// Indicates tickets that should not be barcoded
        /// </summary>
        /// <value>Indicates tickets that should not be barcoded</value>
        [DataMember(Name="noBarcode", EmitDefaultValue=false)]
        public bool? NoBarcode { get; set; }

        /// <summary>
        /// Discounts applied to the ticket
        /// </summary>
        /// <value>Discounts applied to the ticket</value>
        [DataMember(Name="discount", EmitDefaultValue=false)]
        public string Discount { get; set; }

        /// <summary>
        /// Oranization charged service fee
        /// </summary>
        /// <value>Oranization charged service fee</value>
        [DataMember(Name="fee", EmitDefaultValue=false)]
        public string Fee { get; set; }

        /// <summary>
        /// Oranization chaarged tax
        /// </summary>
        /// <value>Oranization chaarged tax</value>
        [DataMember(Name="tax", EmitDefaultValue=false)]
        public string Tax { get; set; }

        /// <summary>
        /// Alloted refund back to ticket (for reports)
        /// </summary>
        /// <value>Alloted refund back to ticket (for reports)</value>
        [DataMember(Name="refund", EmitDefaultValue=false)]
        public string Refund { get; set; }

        /// <summary>
        /// Applicable to promo code discounts
        /// </summary>
        /// <value>Applicable to promo code discounts</value>
        [DataMember(Name="promoCode", EmitDefaultValue=false)]
        public string PromoCode { get; set; }

        /// <summary>
        /// Applicable to promo code discounts
        /// </summary>
        /// <value>Applicable to promo code discounts</value>
        [DataMember(Name="promoName", EmitDefaultValue=false)]
        public string PromoName { get; set; }

        /// <summary>
        /// Applicable to promo code discounts
        /// </summary>
        /// <value>Applicable to promo code discounts</value>
        [DataMember(Name="promoDescription", EmitDefaultValue=false)]
        public string PromoDescription { get; set; }

        /// <summary>
        /// Array of ticket scan activity
        /// </summary>
        /// <value>Array of ticket scan activity</value>
        [DataMember(Name="_scans", EmitDefaultValue=false)]
        public List<Scan> Scans { get; set; }

        /// <summary>
        /// Gets or Sets ScanPointConfig
        /// </summary>
        [DataMember(Name="_scanPointConfig", EmitDefaultValue=false)]
        public ScanPointConfig ScanPointConfig { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ticket {\n");
            sb.Append("  TicketId: ").Append(TicketId).Append("\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  Canceled: ").Append(Canceled).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  SlotDate: ").Append(SlotDate).Append("\n");
            sb.Append("  SlotTime: ").Append(SlotTime).Append("\n");
            sb.Append("  SlotAllDay: ").Append(SlotAllDay).Append("\n");
            sb.Append("  NameOnTicket: ").Append(NameOnTicket).Append("\n");
            sb.Append("  SeatEventTitle: ").Append(SeatEventTitle).Append("\n");
            sb.Append("  SeatVenueTitle: ").Append(SeatVenueTitle).Append("\n");
            sb.Append("  SeatSection: ").Append(SeatSection).Append("\n");
            sb.Append("  SeatCustom1: ").Append(SeatCustom1).Append("\n");
            sb.Append("  SeatCustom2: ").Append(SeatCustom2).Append("\n");
            sb.Append("  SeatRow: ").Append(SeatRow).Append("\n");
            sb.Append("  SeatRowLabel: ").Append(SeatRowLabel).Append("\n");
            sb.Append("  SeatNumber: ").Append(SeatNumber).Append("\n");
            sb.Append("  SeatNumberLabel: ").Append(SeatNumberLabel).Append("\n");
            sb.Append("  SeatText: ").Append(SeatText).Append("\n");
            sb.Append("  NoPrint: ").Append(NoPrint).Append("\n");
            sb.Append("  NoBarcode: ").Append(NoBarcode).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  Refund: ").Append(Refund).Append("\n");
            sb.Append("  PromoCode: ").Append(PromoCode).Append("\n");
            sb.Append("  PromoName: ").Append(PromoName).Append("\n");
            sb.Append("  PromoDescription: ").Append(PromoDescription).Append("\n");
            sb.Append("  Scans: ").Append(Scans).Append("\n");
            sb.Append("  ScanPointConfig: ").Append(ScanPointConfig).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Ticket);
        }

        /// <summary>
        /// Returns true if Ticket instances are equal
        /// </summary>
        /// <param name="input">Instance of Ticket to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ticket input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TicketId == input.TicketId ||
                    (this.TicketId != null &&
                    this.TicketId.Equals(input.TicketId))
                ) && 
                (
                    this.Barcode == input.Barcode ||
                    (this.Barcode != null &&
                    this.Barcode.Equals(input.Barcode))
                ) && 
                (
                    this.Canceled == input.Canceled ||
                    (this.Canceled != null &&
                    this.Canceled.Equals(input.Canceled))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.SlotDate == input.SlotDate ||
                    (this.SlotDate != null &&
                    this.SlotDate.Equals(input.SlotDate))
                ) && 
                (
                    this.SlotTime == input.SlotTime ||
                    (this.SlotTime != null &&
                    this.SlotTime.Equals(input.SlotTime))
                ) && 
                (
                    this.SlotAllDay == input.SlotAllDay ||
                    (this.SlotAllDay != null &&
                    this.SlotAllDay.Equals(input.SlotAllDay))
                ) && 
                (
                    this.NameOnTicket == input.NameOnTicket ||
                    (this.NameOnTicket != null &&
                    this.NameOnTicket.Equals(input.NameOnTicket))
                ) && 
                (
                    this.SeatEventTitle == input.SeatEventTitle ||
                    (this.SeatEventTitle != null &&
                    this.SeatEventTitle.Equals(input.SeatEventTitle))
                ) && 
                (
                    this.SeatVenueTitle == input.SeatVenueTitle ||
                    (this.SeatVenueTitle != null &&
                    this.SeatVenueTitle.Equals(input.SeatVenueTitle))
                ) && 
                (
                    this.SeatSection == input.SeatSection ||
                    (this.SeatSection != null &&
                    this.SeatSection.Equals(input.SeatSection))
                ) && 
                (
                    this.SeatCustom1 == input.SeatCustom1 ||
                    (this.SeatCustom1 != null &&
                    this.SeatCustom1.Equals(input.SeatCustom1))
                ) && 
                (
                    this.SeatCustom2 == input.SeatCustom2 ||
                    (this.SeatCustom2 != null &&
                    this.SeatCustom2.Equals(input.SeatCustom2))
                ) && 
                (
                    this.SeatRow == input.SeatRow ||
                    (this.SeatRow != null &&
                    this.SeatRow.Equals(input.SeatRow))
                ) && 
                (
                    this.SeatRowLabel == input.SeatRowLabel ||
                    (this.SeatRowLabel != null &&
                    this.SeatRowLabel.Equals(input.SeatRowLabel))
                ) && 
                (
                    this.SeatNumber == input.SeatNumber ||
                    (this.SeatNumber != null &&
                    this.SeatNumber.Equals(input.SeatNumber))
                ) && 
                (
                    this.SeatNumberLabel == input.SeatNumberLabel ||
                    (this.SeatNumberLabel != null &&
                    this.SeatNumberLabel.Equals(input.SeatNumberLabel))
                ) && 
                (
                    this.SeatText == input.SeatText ||
                    (this.SeatText != null &&
                    this.SeatText.Equals(input.SeatText))
                ) && 
                (
                    this.NoPrint == input.NoPrint ||
                    (this.NoPrint != null &&
                    this.NoPrint.Equals(input.NoPrint))
                ) && 
                (
                    this.NoBarcode == input.NoBarcode ||
                    (this.NoBarcode != null &&
                    this.NoBarcode.Equals(input.NoBarcode))
                ) && 
                (
                    this.Discount == input.Discount ||
                    (this.Discount != null &&
                    this.Discount.Equals(input.Discount))
                ) && 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                ) && 
                (
                    this.Tax == input.Tax ||
                    (this.Tax != null &&
                    this.Tax.Equals(input.Tax))
                ) && 
                (
                    this.Refund == input.Refund ||
                    (this.Refund != null &&
                    this.Refund.Equals(input.Refund))
                ) && 
                (
                    this.PromoCode == input.PromoCode ||
                    (this.PromoCode != null &&
                    this.PromoCode.Equals(input.PromoCode))
                ) && 
                (
                    this.PromoName == input.PromoName ||
                    (this.PromoName != null &&
                    this.PromoName.Equals(input.PromoName))
                ) && 
                (
                    this.PromoDescription == input.PromoDescription ||
                    (this.PromoDescription != null &&
                    this.PromoDescription.Equals(input.PromoDescription))
                ) && 
                (
                    this.Scans == input.Scans ||
                    this.Scans != null &&
                    this.Scans.SequenceEqual(input.Scans)
                ) && 
                (
                    this.ScanPointConfig == input.ScanPointConfig ||
                    (this.ScanPointConfig != null &&
                    this.ScanPointConfig.Equals(input.ScanPointConfig))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TicketId != null)
                    hashCode = hashCode * 59 + this.TicketId.GetHashCode();
                if (this.Barcode != null)
                    hashCode = hashCode * 59 + this.Barcode.GetHashCode();
                if (this.Canceled != null)
                    hashCode = hashCode * 59 + this.Canceled.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.SlotDate != null)
                    hashCode = hashCode * 59 + this.SlotDate.GetHashCode();
                if (this.SlotTime != null)
                    hashCode = hashCode * 59 + this.SlotTime.GetHashCode();
                if (this.SlotAllDay != null)
                    hashCode = hashCode * 59 + this.SlotAllDay.GetHashCode();
                if (this.NameOnTicket != null)
                    hashCode = hashCode * 59 + this.NameOnTicket.GetHashCode();
                if (this.SeatEventTitle != null)
                    hashCode = hashCode * 59 + this.SeatEventTitle.GetHashCode();
                if (this.SeatVenueTitle != null)
                    hashCode = hashCode * 59 + this.SeatVenueTitle.GetHashCode();
                if (this.SeatSection != null)
                    hashCode = hashCode * 59 + this.SeatSection.GetHashCode();
                if (this.SeatCustom1 != null)
                    hashCode = hashCode * 59 + this.SeatCustom1.GetHashCode();
                if (this.SeatCustom2 != null)
                    hashCode = hashCode * 59 + this.SeatCustom2.GetHashCode();
                if (this.SeatRow != null)
                    hashCode = hashCode * 59 + this.SeatRow.GetHashCode();
                if (this.SeatRowLabel != null)
                    hashCode = hashCode * 59 + this.SeatRowLabel.GetHashCode();
                if (this.SeatNumber != null)
                    hashCode = hashCode * 59 + this.SeatNumber.GetHashCode();
                if (this.SeatNumberLabel != null)
                    hashCode = hashCode * 59 + this.SeatNumberLabel.GetHashCode();
                if (this.SeatText != null)
                    hashCode = hashCode * 59 + this.SeatText.GetHashCode();
                if (this.NoPrint != null)
                    hashCode = hashCode * 59 + this.NoPrint.GetHashCode();
                if (this.NoBarcode != null)
                    hashCode = hashCode * 59 + this.NoBarcode.GetHashCode();
                if (this.Discount != null)
                    hashCode = hashCode * 59 + this.Discount.GetHashCode();
                if (this.Fee != null)
                    hashCode = hashCode * 59 + this.Fee.GetHashCode();
                if (this.Tax != null)
                    hashCode = hashCode * 59 + this.Tax.GetHashCode();
                if (this.Refund != null)
                    hashCode = hashCode * 59 + this.Refund.GetHashCode();
                if (this.PromoCode != null)
                    hashCode = hashCode * 59 + this.PromoCode.GetHashCode();
                if (this.PromoName != null)
                    hashCode = hashCode * 59 + this.PromoName.GetHashCode();
                if (this.PromoDescription != null)
                    hashCode = hashCode * 59 + this.PromoDescription.GetHashCode();
                if (this.Scans != null)
                    hashCode = hashCode * 59 + this.Scans.GetHashCode();
                if (this.ScanPointConfig != null)
                    hashCode = hashCode * 59 + this.ScanPointConfig.GetHashCode();
                return hashCode;
            }
        }
    }
}
