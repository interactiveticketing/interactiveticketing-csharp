/* 
 * Developer API
 *
 * Get your API Key from the [Dashboard](/dashboard/).<br/>Send all API requests with http header `X-API-Key: YOUR-API-KEY-HERE`.<br/>Base URL: `https://secure.interactiveticketing.com/developers/api/v4`<br/>Contact support@interactiveticketing.com for help.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = InteractiveTicketingSdk.Client.SwaggerDateConverter;

namespace InteractiveTicketingSdk.Model
{
    /// <summary>
    /// CartEmail
    /// </summary>
    [DataContract]
        public partial class CartEmail :  IEquatable<CartEmail>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartEmail" /> class.
        /// </summary>
        /// <param name="cartEmailId">The ID.</param>
        /// <param name="createdAt">The time user submitted their email address.</param>
        /// <param name="email">Customer email address.</param>
        /// <param name="cartData">Raw Cart Data collected.</param>
        public CartEmail(int? cartEmailId = default(int?), string createdAt = default(string), string email = default(string), Object cartData = default(Object))
        {
            this.CartEmailId = cartEmailId;
            this.CreatedAt = createdAt;
            this.Email = email;
            this.CartData = cartData;
        }
        
        /// <summary>
        /// The ID
        /// </summary>
        /// <value>The ID</value>
        [DataMember(Name="cartEmailId", EmitDefaultValue=false)]
        public int? CartEmailId { get; set; }

        /// <summary>
        /// The time user submitted their email address
        /// </summary>
        /// <value>The time user submitted their email address</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Customer email address
        /// </summary>
        /// <value>Customer email address</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Raw Cart Data collected
        /// </summary>
        /// <value>Raw Cart Data collected</value>
        [DataMember(Name="cartData", EmitDefaultValue=false)]
        public Object CartData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartEmail {\n");
            sb.Append("  CartEmailId: ").Append(CartEmailId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  CartData: ").Append(CartData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartEmail);
        }

        /// <summary>
        /// Returns true if CartEmail instances are equal
        /// </summary>
        /// <param name="input">Instance of CartEmail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartEmail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CartEmailId == input.CartEmailId ||
                    (this.CartEmailId != null &&
                    this.CartEmailId.Equals(input.CartEmailId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.CartData == input.CartData ||
                    (this.CartData != null &&
                    this.CartData.Equals(input.CartData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CartEmailId != null)
                    hashCode = hashCode * 59 + this.CartEmailId.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.CartData != null)
                    hashCode = hashCode * 59 + this.CartData.GetHashCode();
                return hashCode;
            }
        }
    }
}
