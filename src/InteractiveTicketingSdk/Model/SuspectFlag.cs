/* 
 * Developer API
 *
 * Get your API Key from the [Dashboard](/dashboard/).<br/>Send all API requests with http header `X-API-Key: YOUR-API-KEY-HERE`.<br/>Base URL: `https://secure.interactiveticketing.com/developers/api/v4`<br/>Contact support@interactiveticketing.com for help.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = InteractiveTicketingSdk.Client.SwaggerDateConverter;

namespace InteractiveTicketingSdk.Model
{
    /// <summary>
    /// SuspectFlag
    /// </summary>
    [DataContract]
        public partial class SuspectFlag :  IEquatable<SuspectFlag>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SuspectFlag" /> class.
        /// </summary>
        /// <param name="suspectFlagId">The flag ID.</param>
        /// <param name="orderId">The order ID.</param>
        /// <param name="suspectFilterId">The the suspicious filter ID.</param>
        /// <param name="resolved">True indicates if a suspicous order was approved in the dashboard.</param>
        /// <param name="notes">The optional notes.</param>
        /// <param name="reason">A message describing the reason order is flagged as suspicious.</param>
        public SuspectFlag(int? suspectFlagId = default(int?), int? orderId = default(int?), int? suspectFilterId = default(int?), bool? resolved = default(bool?), string notes = default(string), string reason = default(string))
        {
            this.SuspectFlagId = suspectFlagId;
            this.OrderId = orderId;
            this.SuspectFilterId = suspectFilterId;
            this.Resolved = resolved;
            this.Notes = notes;
            this.Reason = reason;
        }
        
        /// <summary>
        /// The flag ID
        /// </summary>
        /// <value>The flag ID</value>
        [DataMember(Name="suspectFlagId", EmitDefaultValue=false)]
        public int? SuspectFlagId { get; set; }

        /// <summary>
        /// The order ID
        /// </summary>
        /// <value>The order ID</value>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public int? OrderId { get; set; }

        /// <summary>
        /// The the suspicious filter ID
        /// </summary>
        /// <value>The the suspicious filter ID</value>
        [DataMember(Name="suspectFilterId", EmitDefaultValue=false)]
        public int? SuspectFilterId { get; set; }

        /// <summary>
        /// True indicates if a suspicous order was approved in the dashboard
        /// </summary>
        /// <value>True indicates if a suspicous order was approved in the dashboard</value>
        [DataMember(Name="resolved", EmitDefaultValue=false)]
        public bool? Resolved { get; set; }

        /// <summary>
        /// The optional notes
        /// </summary>
        /// <value>The optional notes</value>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// A message describing the reason order is flagged as suspicious
        /// </summary>
        /// <value>A message describing the reason order is flagged as suspicious</value>
        [DataMember(Name="_reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SuspectFlag {\n");
            sb.Append("  SuspectFlagId: ").Append(SuspectFlagId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  SuspectFilterId: ").Append(SuspectFilterId).Append("\n");
            sb.Append("  Resolved: ").Append(Resolved).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SuspectFlag);
        }

        /// <summary>
        /// Returns true if SuspectFlag instances are equal
        /// </summary>
        /// <param name="input">Instance of SuspectFlag to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SuspectFlag input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SuspectFlagId == input.SuspectFlagId ||
                    (this.SuspectFlagId != null &&
                    this.SuspectFlagId.Equals(input.SuspectFlagId))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.SuspectFilterId == input.SuspectFilterId ||
                    (this.SuspectFilterId != null &&
                    this.SuspectFilterId.Equals(input.SuspectFilterId))
                ) && 
                (
                    this.Resolved == input.Resolved ||
                    (this.Resolved != null &&
                    this.Resolved.Equals(input.Resolved))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SuspectFlagId != null)
                    hashCode = hashCode * 59 + this.SuspectFlagId.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.SuspectFilterId != null)
                    hashCode = hashCode * 59 + this.SuspectFilterId.GetHashCode();
                if (this.Resolved != null)
                    hashCode = hashCode * 59 + this.Resolved.GetHashCode();
                if (this.Notes != null)
                    hashCode = hashCode * 59 + this.Notes.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                return hashCode;
            }
        }
    }
}
