/* 
 * Developer API
 *
 * Get your API Key from the [Dashboard](/dashboard/).<br/>Send all API requests with http header `X-API-Key: YOUR-API-KEY-HERE`.<br/>Base URL: `https://secure.interactiveticketing.com/developers/api/v1`<br/>Contact support@interactiveticketing.com for help.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = InteractiveTicketingSdk.Client.SwaggerDateConverter;

namespace InteractiveTicketingSdk.Model
{
    /// <summary>
    /// Order
    /// </summary>
    [DataContract]
        public partial class Order :  IEquatable<Order>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="">The order ID.</param>
        /// <param name="">The order time iso-8601.</param>
        /// <param name="">True indicates a test order.</param>
        /// <param name="">web | pos | kiosk.</param>
        /// <param name="">Customer first name.</param>
        /// <param name="">Customer last name.</param>
        /// <param name="">Customer email address.</param>
        /// <param name="">Customer phone number.</param>
        /// <param name="">Customer mobile phone number.</param>
        /// <param name="">Customer street address.</param>
        /// <param name="">Customer city.</param>
        /// <param name="">Customer state or province name.</param>
        /// <param name="">Customer country.</param>
        /// <param name="">Customer postal code / zip.</param>
        /// <param name="">Organization charged service fee.</param>
        /// <param name="">Organization charged taxes.</param>
        /// <param name="">Organization charged donations.</param>
        /// <param name="">Total charges.</param>
        /// <param name="">Coupons.</param>
        /// <param name="">Coupons Total.</param>
        /// <param name="">Customer IP Address.</param>
        /// <param name="">Customer Browser.</param>
        /// <param name="">mobile | desktop.</param>
        /// <param name="">Source code passed to the purchase interface s&#x3D;myTrackingCode.</param>
        /// <param name="">Custom searchTag applied to order to bookmark it.</param>
        /// <param name="">Array of additional form question responses.</param>
        /// <param name="">Array of payment/refund transactions.</param>
        /// <param name="">Array of tickets ordered.</param>
        /// <param name="">Applicable to pos orders.</param>
        public Order(int?  = default(int?), string  = default(string), bool?  = default(bool?), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string), int?  = default(int?), int?  = default(int?), string  = default(string), string  = default(string), string  = default(string), string  = default(string), string  = default(string), List<Survey>  = default(List<Survey>), List<Transaction>  = default(List<Transaction>), List<Ticket>  = default(List<Ticket>), string  = default(string))
        {
            this.OrderId = ;
            this.DateTime = ;
            this.TestOrder = ;
            this.OrderType = ;
            this.FirstName = ;
            this.LastName = ;
            this.Email = ;
            this.Phone = ;
            this.MobilePhone = ;
            this.Street = ;
            this.City = ;
            this.StateProvince = ;
            this.Country = ;
            this.PostalCode = ;
            this.Fees = ;
            this.Taxes = ;
            this.Donations = ;
            this.GrandTotal = ;
            this.Coupons = ;
            this.CouponsTotal = ;
            this.IPAddress = ;
            this.BrowserName = ;
            this.BrowserDevice = ;
            this.SourceCode = ;
            this.SearchTag = ;
            this.Survey = ;
            this.Transactions = ;
            this.Tickets = ;
            this.PosCashierName = ;
        }
        
        /// <summary>
        /// The order ID
        /// </summary>
        /// <value>The order ID</value>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public int? OrderId { get; set; }

        /// <summary>
        /// The order time iso-8601
        /// </summary>
        /// <value>The order time iso-8601</value>
        [DataMember(Name="dateTime", EmitDefaultValue=false)]
        public string DateTime { get; set; }

        /// <summary>
        /// True indicates a test order
        /// </summary>
        /// <value>True indicates a test order</value>
        [DataMember(Name="testOrder", EmitDefaultValue=false)]
        public bool? TestOrder { get; set; }

        /// <summary>
        /// web | pos | kiosk
        /// </summary>
        /// <value>web | pos | kiosk</value>
        [DataMember(Name="orderType", EmitDefaultValue=false)]
        public string OrderType { get; set; }

        /// <summary>
        /// Customer first name
        /// </summary>
        /// <value>Customer first name</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Customer last name
        /// </summary>
        /// <value>Customer last name</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Customer email address
        /// </summary>
        /// <value>Customer email address</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Customer phone number
        /// </summary>
        /// <value>Customer phone number</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Customer mobile phone number
        /// </summary>
        /// <value>Customer mobile phone number</value>
        [DataMember(Name="mobilePhone", EmitDefaultValue=false)]
        public string MobilePhone { get; set; }

        /// <summary>
        /// Customer street address
        /// </summary>
        /// <value>Customer street address</value>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// Customer city
        /// </summary>
        /// <value>Customer city</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Customer state or province name
        /// </summary>
        /// <value>Customer state or province name</value>
        [DataMember(Name="stateProvince", EmitDefaultValue=false)]
        public string StateProvince { get; set; }

        /// <summary>
        /// Customer country
        /// </summary>
        /// <value>Customer country</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Customer postal code / zip
        /// </summary>
        /// <value>Customer postal code / zip</value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Organization charged service fee
        /// </summary>
        /// <value>Organization charged service fee</value>
        [DataMember(Name="fees", EmitDefaultValue=false)]
        public string Fees { get; set; }

        /// <summary>
        /// Organization charged taxes
        /// </summary>
        /// <value>Organization charged taxes</value>
        [DataMember(Name="taxes", EmitDefaultValue=false)]
        public string Taxes { get; set; }

        /// <summary>
        /// Organization charged donations
        /// </summary>
        /// <value>Organization charged donations</value>
        [DataMember(Name="donations", EmitDefaultValue=false)]
        public string Donations { get; set; }

        /// <summary>
        /// Total charges
        /// </summary>
        /// <value>Total charges</value>
        [DataMember(Name="grandTotal", EmitDefaultValue=false)]
        public string GrandTotal { get; set; }

        /// <summary>
        /// Coupons
        /// </summary>
        /// <value>Coupons</value>
        [DataMember(Name="coupons", EmitDefaultValue=false)]
        public int? Coupons { get; set; }

        /// <summary>
        /// Coupons Total
        /// </summary>
        /// <value>Coupons Total</value>
        [DataMember(Name="couponsTotal", EmitDefaultValue=false)]
        public int? CouponsTotal { get; set; }

        /// <summary>
        /// Customer IP Address
        /// </summary>
        /// <value>Customer IP Address</value>
        [DataMember(Name="IPAddress", EmitDefaultValue=false)]
        public string IPAddress { get; set; }

        /// <summary>
        /// Customer Browser
        /// </summary>
        /// <value>Customer Browser</value>
        [DataMember(Name="browserName", EmitDefaultValue=false)]
        public string BrowserName { get; set; }

        /// <summary>
        /// mobile | desktop
        /// </summary>
        /// <value>mobile | desktop</value>
        [DataMember(Name="browserDevice", EmitDefaultValue=false)]
        public string BrowserDevice { get; set; }

        /// <summary>
        /// Source code passed to the purchase interface s&#x3D;myTrackingCode
        /// </summary>
        /// <value>Source code passed to the purchase interface s&#x3D;myTrackingCode</value>
        [DataMember(Name="sourceCode", EmitDefaultValue=false)]
        public string SourceCode { get; set; }

        /// <summary>
        /// Custom searchTag applied to order to bookmark it
        /// </summary>
        /// <value>Custom searchTag applied to order to bookmark it</value>
        [DataMember(Name="searchTag", EmitDefaultValue=false)]
        public string SearchTag { get; set; }

        /// <summary>
        /// Array of additional form question responses
        /// </summary>
        /// <value>Array of additional form question responses</value>
        [DataMember(Name="survey", EmitDefaultValue=false)]
        public List<Survey> Survey { get; set; }

        /// <summary>
        /// Array of payment/refund transactions
        /// </summary>
        /// <value>Array of payment/refund transactions</value>
        [DataMember(Name="_transactions", EmitDefaultValue=false)]
        public List<Transaction> Transactions { get; set; }

        /// <summary>
        /// Array of tickets ordered
        /// </summary>
        /// <value>Array of tickets ordered</value>
        [DataMember(Name="_tickets", EmitDefaultValue=false)]
        public List<Ticket> Tickets { get; set; }

        /// <summary>
        /// Applicable to pos orders
        /// </summary>
        /// <value>Applicable to pos orders</value>
        [DataMember(Name="_posCashierName", EmitDefaultValue=false)]
        public string PosCashierName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  TestOrder: ").Append(TestOrder).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  MobilePhone: ").Append(MobilePhone).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  Donations: ").Append(Donations).Append("\n");
            sb.Append("  GrandTotal: ").Append(GrandTotal).Append("\n");
            sb.Append("  Coupons: ").Append(Coupons).Append("\n");
            sb.Append("  CouponsTotal: ").Append(CouponsTotal).Append("\n");
            sb.Append("  IPAddress: ").Append(IPAddress).Append("\n");
            sb.Append("  BrowserName: ").Append(BrowserName).Append("\n");
            sb.Append("  BrowserDevice: ").Append(BrowserDevice).Append("\n");
            sb.Append("  SourceCode: ").Append(SourceCode).Append("\n");
            sb.Append("  SearchTag: ").Append(SearchTag).Append("\n");
            sb.Append("  Survey: ").Append(Survey).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  Tickets: ").Append(Tickets).Append("\n");
            sb.Append("  PosCashierName: ").Append(PosCashierName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Order);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="input">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                ) && 
                (
                    this.TestOrder == input.TestOrder ||
                    (this.TestOrder != null &&
                    this.TestOrder.Equals(input.TestOrder))
                ) && 
                (
                    this.OrderType == input.OrderType ||
                    (this.OrderType != null &&
                    this.OrderType.Equals(input.OrderType))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.MobilePhone == input.MobilePhone ||
                    (this.MobilePhone != null &&
                    this.MobilePhone.Equals(input.MobilePhone))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.StateProvince == input.StateProvince ||
                    (this.StateProvince != null &&
                    this.StateProvince.Equals(input.StateProvince))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Fees == input.Fees ||
                    (this.Fees != null &&
                    this.Fees.Equals(input.Fees))
                ) && 
                (
                    this.Taxes == input.Taxes ||
                    (this.Taxes != null &&
                    this.Taxes.Equals(input.Taxes))
                ) && 
                (
                    this.Donations == input.Donations ||
                    (this.Donations != null &&
                    this.Donations.Equals(input.Donations))
                ) && 
                (
                    this.GrandTotal == input.GrandTotal ||
                    (this.GrandTotal != null &&
                    this.GrandTotal.Equals(input.GrandTotal))
                ) && 
                (
                    this.Coupons == input.Coupons ||
                    (this.Coupons != null &&
                    this.Coupons.Equals(input.Coupons))
                ) && 
                (
                    this.CouponsTotal == input.CouponsTotal ||
                    (this.CouponsTotal != null &&
                    this.CouponsTotal.Equals(input.CouponsTotal))
                ) && 
                (
                    this.IPAddress == input.IPAddress ||
                    (this.IPAddress != null &&
                    this.IPAddress.Equals(input.IPAddress))
                ) && 
                (
                    this.BrowserName == input.BrowserName ||
                    (this.BrowserName != null &&
                    this.BrowserName.Equals(input.BrowserName))
                ) && 
                (
                    this.BrowserDevice == input.BrowserDevice ||
                    (this.BrowserDevice != null &&
                    this.BrowserDevice.Equals(input.BrowserDevice))
                ) && 
                (
                    this.SourceCode == input.SourceCode ||
                    (this.SourceCode != null &&
                    this.SourceCode.Equals(input.SourceCode))
                ) && 
                (
                    this.SearchTag == input.SearchTag ||
                    (this.SearchTag != null &&
                    this.SearchTag.Equals(input.SearchTag))
                ) && 
                (
                    this.Survey == input.Survey ||
                    this.Survey != null &&
                    this.Survey.SequenceEqual(input.Survey)
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    this.Transactions != null &&
                    this.Transactions.SequenceEqual(input.Transactions)
                ) && 
                (
                    this.Tickets == input.Tickets ||
                    this.Tickets != null &&
                    this.Tickets.SequenceEqual(input.Tickets)
                ) && 
                (
                    this.PosCashierName == input.PosCashierName ||
                    (this.PosCashierName != null &&
                    this.PosCashierName.Equals(input.PosCashierName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.DateTime != null)
                    hashCode = hashCode * 59 + this.DateTime.GetHashCode();
                if (this.TestOrder != null)
                    hashCode = hashCode * 59 + this.TestOrder.GetHashCode();
                if (this.OrderType != null)
                    hashCode = hashCode * 59 + this.OrderType.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.MobilePhone != null)
                    hashCode = hashCode * 59 + this.MobilePhone.GetHashCode();
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.StateProvince != null)
                    hashCode = hashCode * 59 + this.StateProvince.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.Fees != null)
                    hashCode = hashCode * 59 + this.Fees.GetHashCode();
                if (this.Taxes != null)
                    hashCode = hashCode * 59 + this.Taxes.GetHashCode();
                if (this.Donations != null)
                    hashCode = hashCode * 59 + this.Donations.GetHashCode();
                if (this.GrandTotal != null)
                    hashCode = hashCode * 59 + this.GrandTotal.GetHashCode();
                if (this.Coupons != null)
                    hashCode = hashCode * 59 + this.Coupons.GetHashCode();
                if (this.CouponsTotal != null)
                    hashCode = hashCode * 59 + this.CouponsTotal.GetHashCode();
                if (this.IPAddress != null)
                    hashCode = hashCode * 59 + this.IPAddress.GetHashCode();
                if (this.BrowserName != null)
                    hashCode = hashCode * 59 + this.BrowserName.GetHashCode();
                if (this.BrowserDevice != null)
                    hashCode = hashCode * 59 + this.BrowserDevice.GetHashCode();
                if (this.SourceCode != null)
                    hashCode = hashCode * 59 + this.SourceCode.GetHashCode();
                if (this.SearchTag != null)
                    hashCode = hashCode * 59 + this.SearchTag.GetHashCode();
                if (this.Survey != null)
                    hashCode = hashCode * 59 + this.Survey.GetHashCode();
                if (this.Transactions != null)
                    hashCode = hashCode * 59 + this.Transactions.GetHashCode();
                if (this.Tickets != null)
                    hashCode = hashCode * 59 + this.Tickets.GetHashCode();
                if (this.PosCashierName != null)
                    hashCode = hashCode * 59 + this.PosCashierName.GetHashCode();
                return hashCode;
            }
        }
    }
}
